{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOesHooDpKdMs7CrB8mtpUr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"FSON8CfMJf4U","executionInfo":{"status":"ok","timestamp":1669167734722,"user_tz":-540,"elapsed":468,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"outputs":[],"source":["from __future__ import print_function\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","class TwoLayerNet(object):\n","  \"\"\"\n","  A two-layer fully-connected neural network. The net has an input dimension of\n","  N, a hidden layer dimension of H, and performs classification over C classes.\n","  We train the network with a softmax loss function and L2 regularization on the\n","  weight matrices. The network uses a ReLU nonlinearity after the first fully\n","  connected layer.\n","\n","  In other words, the network has the following architecture:\n","\n","  input - fully connected layer - ReLU - fully connected layer - softmax\n","\n","  The outputs of the second fully-connected layer are the scores for each class.\n","  \"\"\"\n","\n","  def __init__(self, input_size, hidden_size, output_size, std=1e-4):\n","    \"\"\"\n","    Initialize the model. Weights are initialized to small random values and\n","    biases are initialized to zero. Weights and biases are stored in the\n","    variable self.params, which is a dictionary with the following keys:\n","\n","    W1: First layer weights; has shape (D, H)\n","    b1: First layer biases; has shape (H,)\n","    W2: Second layer weights; has shape (H, C)\n","    b2: Second layer biases; has shape (C,)\n","\n","    Inputs:\n","    - input_size: The dimension D of the input data.\n","    - hidden_size: The number of neurons H in the hidden layer.\n","    - output_size: The number of classes C.\n","    \"\"\"\n","\t# np.random.randn(shape)\n","\t# - Return a sample (or samples) from the “standard normal” distribution following shape\n","    self.params = {}\n","    self.params['W1'] = std * np.random.randn(input_size, hidden_size)\n","    self.params['b1'] = np.zeros(hidden_size)\n","    self.params['W2'] = std * np.random.randn(hidden_size, output_size)\n","    self.params['b2'] = np.zeros(output_size)\n","\n","  def loss(self, X, y=None, reg=0.0):\n","    \"\"\"\n","    Compute the loss and gradients for a two layer fully connected neural\n","    network.\n","\n","    Inputs:\n","    - X: Input data of shape (N, D). Each X[i] is a training sample.\n","    - y: Vector of training labels. y[i] is the label for X[i], and each y[i] is\n","      an integer in the range 0 <= y[i] < C. This parameter is optional; if it\n","      is not passed then we only return scores, and if it is passed then we\n","      instead return the loss and gradients.\n","    - reg: Regularization strength.\n","\n","    Returns:\n","    If y is None, return a matrix scores of shape (N, C) where scores[i, c] is\n","    the score for class c on input X[i].\n","\n","    If y is not None, instead return a tuple of:\n","    - loss: Loss (data loss and regularization loss) for this batch of training\n","      samples.\n","    - grads: Dictionary mapping parameter names to gradients of those parameters\n","      with respect to the loss function; has the same keys as self.params.\n","    \"\"\"\n","    # Unpack variables from the params dictionary\n","    W1, b1 = self.params['W1'], self.params['b1']\n","    W2, b2 = self.params['W2'], self.params['b2']\n","    N, D = X.shape\n","\n","    # Compute the forward pass\n","    scores = None\n","    #############################################################################\n","    # TODO: Perform the forward pass, computing the class scores for the input. #\n","    # Store the result in the scores variable, which should be an array of      #\n","    # shape (N, C).                                                             #\n","    #############################################################################\n","\t# *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\t\n","    pass\n","\t\n","\t# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    #############################################################################\n","    #                              END OF YOUR CODE                             #\n","    #############################################################################\n","    \n","    # If the targets are not given then jump out, we're done\n","    if y is None:\n","      return scores\n","\n","    # Compute the loss\n","    loss = None\n","    #############################################################################\n","    # TODO: Finish the forward pass, and compute the loss. This should include  #\n","    # both the data loss and L2 regularization for W1 and W2. Store the result  #\n","    # in the variable loss, which should be a scalar. Use the Softmax           #\n","    # classifier loss.                                                          #\n","    #############################################################################\n","\t# *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\t\n","    pass\n","\t\n","\t# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    #############################################################################\n","    #                              END OF YOUR CODE                             #\n","    #############################################################################\n","\n","    # Backward pass: compute gradients\n","    grads = {}\n","    #############################################################################\n","    # TODO: Compute the backward pass, computing the derivatives of the weights #\n","    # and biases. Store the results in the grads dictionary. For example,       #\n","    # grads['W1'] should store the gradient on W1, and be a matrix of same size #\n","    #############################################################################\n","\t# *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\t\n","    pass\n","\t\n","\t# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    #############################################################################\n","    #                              END OF YOUR CODE                             #\n","    #############################################################################\n","\n","    return loss, grads\n","\n","  def train(self, X, y, X_val, y_val,\n","            learning_rate=1e-3, learning_rate_decay=0.95,\n","            reg=5e-6, num_iters=100,\n","            batch_size=200, verbose=False):\n","    \"\"\"\n","    Train this neural network using stochastic gradient descent.\n","\n","    Inputs:\n","    - X: A numpy array of shape (N, D) giving training data.\n","    - y: A numpy array f shape (N,) giving training labels; y[i] = c means that\n","      X[i] has label c, where 0 <= c < C.\n","    - X_val: A numpy array of shape (N_val, D) giving validation data.\n","    - y_val: A numpy array of shape (N_val,) giving validation labels.\n","    - learning_rate: Scalar giving learning rate for optimization.\n","    - learning_rate_decay: Scalar giving factor used to decay the learning rate\n","      after each epoch.\n","    - reg: Scalar giving regularization strength.\n","    - num_iters: Number of steps to take when optimizing.\n","    - batch_size: Number of training examples to use per step.\n","    - verbose: boolean; if true print progress during optimization.\n","    \"\"\"\n","    num_train = X.shape[0]\n","    iterations_per_epoch = max(num_train / batch_size, 1)\n","\n","    # Use SGD to optimize the parameters in self.model\n","    loss_history = []\n","    train_acc_history = []\n","    val_acc_history = []\n","\n","    for it in range(num_iters):\n","      X_batch = None\n","      y_batch = None\n","\n","      #########################################################################\n","      # TODO: Create a random minibatch of training data and labels, storing  #\n","      # them in X_batch and y_batch respectively.                             #\n","\t  # - See [ np.random.choice ]\t\t\t\t\t\t\t\t\t\t\t  #\n","      #########################################################################\n","\t  # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\t  \n","      pass\n","\t  \n","\t  # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","      #########################################################################\n","      #                             END OF YOUR CODE                          #\n","      #########################################################################\n","\t  \n","      # Compute loss and gradients using the current minibatch\n","      loss, grads = self.loss(X_batch, y=y_batch, reg=reg) # loss function you completed above\n","      loss_history.append(loss)\n","\t  \n","      #########################################################################\n","      # TODO: Use the gradients in the grads dictionary to update the         #\n","      # parameters of the network (stored in the dictionary self.params)      #\n","      # using stochastic gradient descent. You'll need to use the gradients   #\n","      # stored in the grads dictionary defined above.                         #\n","      #########################################################################\n","\t  # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\t  \n","      pass\n","\t  \n","\t  # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","      #########################################################################\n","      #                             END OF YOUR CODE                          #\n","      #########################################################################\n","\n","\t  # print loss value per 100 epoch\n","      if verbose and it % 100 == 0:\n","        print('iteration %d / %d: loss %f' % (it, num_iters, loss))\n","\n","      # Every epoch, check train and val accuracy and decay learning rate.\n","      if it % iterations_per_epoch == 0:\n","        # Check accuracy\n","        train_acc = (self.predict(X_batch) == y_batch).mean()\n","        val_acc = (self.predict(X_val) == y_val).mean()\n","        train_acc_history.append(train_acc)\n","        val_acc_history.append(val_acc)\n","\n","        # Decay learning rate\n","        learning_rate *= learning_rate_decay\n","\n","    return {\n","      'loss_history': loss_history,\n","      'train_acc_history': train_acc_history,\n","      'val_acc_history': val_acc_history,\n","    }\n","\n","  def predict(self, X):\n","    \"\"\"\n","    Use the trained weights of this two-layer network to predict labels for\n","    data points. For each data point we predict scores for each of the C\n","    classes, and assign each data point to the class with the highest score.\n","\n","    Inputs:\n","    - X: A numpy array of shape (N, D) giving N D-dimensional data points to\n","      classify.\n","\n","    Returns:\n","    - y_pred: A numpy array of shape (N,) giving predicted labels for each of\n","      the elements of X. For all i, y_pred[i] = c means that X[i] is predicted\n","      to have class c, where 0 <= c < C.\n","    \"\"\"\n","    y_pred = None\n","\n","    ###########################################################################\n","    # TODO: Implement this function; it should be VERY simple!                #\n","\t# perform forward pass and return index of maximum scores\t\t\t\t  #\n","    ###########################################################################\n","\t# *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","\t\n","    pass\n","\t\n","\t# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n","    ###########################################################################\n","    #                              END OF YOUR CODE                           #\n","    ###########################################################################\n","\n","    return y_pred\n","\n","\n"]}]}