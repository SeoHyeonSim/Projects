{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1XTRcNbxFCqXbi5LJPLNfN6PEDPUvS8Qk","timestamp":1667978625057}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"S9Db_VsP_m1S"},"source":["## 오차역전파 (Backpropagation)\n"]},{"cell_type":"markdown","metadata":{"id":"8Vdi2PAG_3lW"},"source":["### 오차역전파 알고리즘\n","- 학습 데이터로 정방향(forward) 연산을 통해 손실함수 값(loss)을 구함\n","\n","- 각 layer별로 역전파학습을 위해 중간값을 저장\n","\n","- 손실함수를 학습 파라미터(가중치, 편향)로 미분하여  \n","  마지막 layer로부터 앞으로 하나씩 연쇄법칙을 이용하여 미분\n","  각 layer를 통과할 때마다 저장된 값을 이용\n","\n","- 오류(error)를 전달하면서 학습 파라미터를 조금씩 갱신\n"]},{"cell_type":"markdown","metadata":{"id":"-o545ezeUuSB"},"source":["### 오차역전파 학습의 특징\n","- 손실함수를 통한 평가를 한 번만 하고, 연쇄법칙을 이용한 미분을 활용하기 때문에  \n","  학습 소요시간이 매우 단축!\n","\n","- 미분을 위한 중간값을 모두 저장하기 때문에 메모리를 많이 사용\n"]},{"cell_type":"markdown","metadata":{"id":"CFoTt-ds_w8C"},"source":["### 신경망 학습에 있어서 미분가능의 중요성\n","- 경사하강법(Gradient Descent)에서 손실 함수(cost function)의 최소값,  \n","  즉, 최적값을 찾기 위한 방법으로 미분을 활용\n","\n","- 미분을 통해 손실 함수의 학습 매개변수(trainable parameter)를 갱신하여  \n","  모델의 가중치의 최적값을 찾는 과정\n","\n","![](https://i.pinimg.com/originals/5d/13/20/5d1320c7b672710834e63b95a7c1037b.png)\n","\n","<sub>출처: https://www.pinterest.co.kr/pin/424816177350692379/</sub>"]},{"cell_type":"markdown","metadata":{"id":"ilYRMqLeQf6Z"},"source":["### 합성함수의 미분 (연쇄법칙, chain rule)\n","\n","## $\\qquad \\frac{d}{dx} [f(g(x))] = f^\\prime(g(x))g^\\prime(x)$  \n"," \n","\n","- 여러 개 연속으로 사용가능  \n","  ## $ \\quad \\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial u} \\times \\frac{\\partial u}{\\partial m} \\times \\frac{\\partial m}{\\partial n} \\times \\ ... \\ \\frac{\\partial l}{\\partial k} \\times \\frac{\\partial k}{\\partial g} \\times \\frac{\\partial g}{\\partial x} \n","  $\n","- 각각에 대해 편미분 적용가능\n","\n","![](https://cdn-media-1.freecodecamp.org/images/1*_KMMFvRP5X9kC59brI0ykw.png)\n","<sub>출처: https://www.freecodecamp.org/news/demystifying-gradient-descent-and-backpropagation-via-logistic-regression-based-image-classification-9b5526c2ed46/</sub>\n","\n","- **오차역전파의 직관적 이해**\n","  - 학습을 진행하면서, 즉 손실함수의 최소값(minimum)을 찾아가는 과정에서 가중치 또는 편향의 변화에 따라 얼마나 영향을 받는지 알 수 있음\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6NLF8CXiQkuL"},"source":["#### 합성함수 미분(chain rule) 예제\n","\n","![](https://miro.medium.com/max/1000/1*azqHvbrNsZ8AIZ7H75tbIQ.jpeg)\n","\n","<sub>출처: https://medium.com/spidernitt/breaking-down-neural-networks-an-intuitive-approach-to-backpropagation-3b2ff958794c</sub>\n","\n","  #### $\\quad a=-1, \\ b=3, \\ c=4$,\n","  #### $\\quad x = a + b, \\ y = b + c, \\ f = x * y \\ 일 때$    \n","\n","\n","\n","  ### $\\quad \\begin{matrix}\\frac{\\partial f}{\\partial x} &=& y\\ + \\ x \\ \\frac{\\partial y}{\\partial x} \\\\\n","  &=& (b \\ + \\ c) \\ + \\ (a \\ +\\ b)\\ \\times \\ 0 \\\\\n","  &=& 7 \\end{matrix}$\n","\n","  ### $\\quad \\begin{matrix}\\frac{\\partial f}{\\partial y} &=& x\\ + \\ \\frac{\\partial x}{\\partial y} \\ y \\\\\n","  &=& (a \\ + \\ b) \\ + \\ 0 \\times (b \\ +\\ c) \\\\\n","  &=& 2 \\end{matrix}$\n","\n","   <br>\n","\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial x}{\\partial a} &=& 1 \\ + \\ a \\ \\frac{\\partial b}{\\partial a} \\\\\n","  &=& 1 \\end{matrix} $\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial y}{\\partial c} &=& \\frac{\\partial b}{\\partial c}\\ + 1 \\\\\n","   &=& 1 \\end{matrix} $\n","  \n","  <br>\n","\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial f}{\\partial a} &=& \\frac{\\partial f}{\\partial x} \\times \\frac{\\partial x}{\\partial a} \\\\\n","  &=& y \\times 1 \\\\ \n","  &=& 7 \\times 1 = 7 \\\\\n","  &=& 7  \\end{matrix} $\n","    \n","  ### $ \\quad \\begin{matrix} \\frac{\\partial f}{\\partial b}\\ \n","  &=& \\frac{\\partial x}{\\partial b} \\ y \\ + \\ x \\ \\frac{\\partial y}{\\partial b}  \\\\\n","  &=& 1 \\times 7 + 2 \\times 1  \\\\\n","  &=& 9 \\end{matrix} $\n","  \n","\n","  \n","  "]},{"cell_type":"markdown","metadata":{"id":"2PgmdJN0Qtdw"},"source":["### 덧셈, 곱셈 계층의 역전파\n","- 위 예제를 통해 아래 사항을 알 수 있음\n","\n","  #### 1. $\\quad z = x + y$ 일 때,\n","  ## $\\frac{\\partial z}{\\partial x} = 1, \\frac{\\partial z}{\\partial y} = 1 $\n","\n","  #### 2. $\\quad t = xy$ 일 때,\n","  ## $\\frac{\\partial t}{\\partial x} = y, \\frac{\\partial t}{\\partial y} = x$\n"]},{"cell_type":"code","metadata":{"id":"hShSxvW5WMqi","executionInfo":{"status":"ok","timestamp":1668048992840,"user_tz":-540,"elapsed":8,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class Mul():\n","\n","  def __init__(self):\n","    self.x = None\n","    self.y = None\n","\n","  def forward(self, x, y):\n","    self.x = x\n","    self.y = y\n","    result = x* y\n","    return result\n","\n","  def backward(self, dresult):\n","    dx = dresult * self.y\n","    dy = dresult * self.x\n","    return dx, dy\n","\n"],"execution_count":100,"outputs":[]},{"cell_type":"code","metadata":{"id":"1bovOx6UQvLP","executionInfo":{"status":"ok","timestamp":1668048992841,"user_tz":-540,"elapsed":8,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class Add():\n","\n","  def __init__(self):\n","    self.x = None\n","    self.y = None\n","\n","  def forward(self, x, y):\n","    self.x = x\n","    self.y = y\n","    result = x + y\n","    return result\n","  \n","  def backward(self, dresult):\n","    dx = dresult * 1\n","    dy = dresult * 1\n","    return dx, dy"],"execution_count":101,"outputs":[]},{"cell_type":"code","metadata":{"id":"e3RawqlUQwp0","executionInfo":{"status":"ok","timestamp":1668048992841,"user_tz":-540,"elapsed":8,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["a, b, c = -1, 3, 4\n","\n","x = Add()\n","y = Add()\n","f = Mul()"],"execution_count":102,"outputs":[]},{"cell_type":"code","metadata":{"id":"soyk-HWiSnwh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668048992841,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"7180cc3f-d906-4531-b3ee-94c88654a68d"},"source":["x_result = x.forward(a, b)\n","y_result = y.forward(b, c)\n","\n","print(x_result)\n","print(y_result)\n","print(f.forward(x_result, y_result))"],"execution_count":103,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n","7\n","14\n"]}]},{"cell_type":"code","metadata":{"id":"FhPPrFIqSpq1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668048992841,"user_tz":-540,"elapsed":5,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"70891944-83b5-4db2-8242-a2b949a9435d"},"source":["dresult = 1\n","dx_mul, dy_mul = f.backward(dresult)\n","\n","da_add, db_add_1 = x.backward(dx_mul)\n","db_add_2, dc_add = y.backward(dy_mul)\n","\n","print(dx_mul, dy_mul)\n","print(da_add)\n","print(db_add_1 + db_add_2)\n","print(dc_add)"],"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["7 2\n","7\n","9\n","2\n"]}]},{"cell_type":"markdown","metadata":{"id":"dMfl0J1uWgiY"},"source":["![](https://miro.medium.com/max/2000/1*U3mVDYuvnaLhJzIFw_d5qQ.png)\n","<sub>출처: https://medium.com/spidernitt/breaking-down-neural-networks-an-intuitive-approach-to-backpropagation-3b2ff958794c</sub>"]},{"cell_type":"markdown","metadata":{"id":"byODNRUF5fbv"},"source":["### 활성화 함수(Activation)에서의 역전파"]},{"cell_type":"markdown","metadata":{"id":"OkRurUgm5hqn"},"source":["#### 시그모이드(Sigmoid) 함수\n","\n","![](https://media.geeksforgeeks.org/wp-content/uploads/20190911181329/Screenshot-2019-09-11-18.05.46.png)\n","\n","<sub>출처: https://www.geeksforgeeks.org/implement-sigmoid-function-using-numpy/</sub>\n","\n","- 수식 \n","  # $\\quad y = \\frac{1}{1 + e^{-x}} $일 때,\n","\n","  ## $\\quad \\begin{matrix}y' &=& (\\frac{1}{1 + e^{-x}})' \\\\\n","  &=& \\frac{-1}{(1 + e^{-x})^2}\\ \\times \\ (-e^{-x}) \\\\\n","  &=& \\frac{1}{1 + e^{-x}} \\ \\times \\ \\frac{e^{-x}}{1 + e^{-x}} \\\\\n","  &=& \\frac{1}{1 + e^{-x}} \\ \\times \\ (1 - \\frac{1}{1 + e^{-x}}) \\\\\n","  &=& y\\ (1\\ - \\ y)\n","  \\end{matrix}$"]},{"cell_type":"code","metadata":{"id":"DNWIw7ElVhLK","executionInfo":{"status":"ok","timestamp":1668048992841,"user_tz":-540,"elapsed":3,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["import numpy as np\n","\n","class Sigmoid():\n","  def __init__(self):\n","    self.out = None\n","\n","  def forward(self, x):\n","    out = 1 / (1 + np.exp(-x))\n","    return out\n","  def backward(self, dout):\n","    dx = dout * (1.0 - self.out) * self.dout\n","    return dx"],"execution_count":105,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QWZ247xo5mtv"},"source":["#### ReLU 함수\n","\n","![](https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2018/10/Line-Plot-of-Rectified-Linear-Activation-for-Negative-and-Positive-Inputs.png)\n","\n","<sub>출처: https://machinelearningmastery.com/rectified-linear-activation-function-for-deep-learning-neural-networks/</sub>\n","\n","\n","- 수식  \n","\n","  ### $\\qquad y=\n","  \\begin{cases}\n","  x & (x \\ge 0)  \\\\\n","  0 & (x < 0)\n","  \\end{cases}$ 일 때,\n","\n","  <br>\n","\n","  ### $\\qquad \\frac{\\partial y}{\\partial x}=\n","  \\begin{cases}\n","  1 & (x \\ge 0)  \\\\\n","  0 & (x < 0)\n","  \\end{cases}$"]},{"cell_type":"code","metadata":{"id":"hHcPmAzh5nOZ","executionInfo":{"status":"ok","timestamp":1668048993303,"user_tz":-540,"elapsed":465,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class ReLu():\n","  def __init__(self):\n","    self.out = None\n","  \n","  def forwar(self, x):\n","    self.mask = (x < 0)\n","    out = x.copy()\n","    out[x<0] = 0\n","    return out\n","  \n","  def backward(self, dout):\n","    dx = dout[self.mask] = 0\n","    return dx"],"execution_count":106,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MH_kQzedJFfw"},"source":["### 행렬 연산에 대한 역전파\n","\n","# $\\qquad Y = X \\bullet W + B$"]},{"cell_type":"markdown","metadata":{"id":"W-SedVrpJILw"},"source":["#### 순전파(forward)\n","  \n","  - 형상(shape)을 맞춰줘야함\n","  - 앞서 봤던 곱셈, 덧셈 계층을 합친 형태"]},{"cell_type":"code","metadata":{"id":"QKIO7EzSJGD1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668048993304,"user_tz":-540,"elapsed":20,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"5480eeb5-b4ea-41b0-aaac-c17321f5a6bc"},"source":["X = np.random.rand(3)\n","W = np.random.rand(3,2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)"],"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["(3,)\n","(3, 2)\n","(2,)\n"]}]},{"cell_type":"code","metadata":{"id":"Tqvl76fFJNfU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668048993304,"user_tz":-540,"elapsed":17,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"eb236ad5-b7d9-4698-c2d9-d1807e626699"},"source":["Y = np.dot(X, W) + B\n","print(Y.shape)"],"execution_count":108,"outputs":[{"output_type":"stream","name":"stdout","text":["(2,)\n"]}]},{"cell_type":"code","metadata":{"id":"vTjJIvg9JPMV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668048993305,"user_tz":-540,"elapsed":14,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"fdee5cf6-48de-41a5-bbee-fef87261ffb0"},"source":["X = np.random.rand(3)\n","W = np.random.rand(3,2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)"],"execution_count":109,"outputs":[{"output_type":"stream","name":"stdout","text":["(3,)\n","(3, 2)\n","(2,)\n"]}]},{"cell_type":"code","metadata":{"id":"QnB0hE6YJQuD","colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"status":"error","timestamp":1668048993305,"user_tz":-540,"elapsed":12,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"f7cd0700-a052-41cb-8d95-f7269dbaeb46"},"source":["X = np.random.rand(3)\n","W = np.random.rand(2,2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)\n","Y = np.dot(X, W) + B\n","print(Y.shape)\n","\n","# W에서 shape이 안 맞으므로 당연히 오류. "],"execution_count":110,"outputs":[{"output_type":"stream","name":"stdout","text":["(3,)\n","(2, 2)\n","(2,)\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-110-4243ca01edbf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mW\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mY\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mW\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)"]}]},{"cell_type":"markdown","metadata":{"id":"04GHZHAiJUGl"},"source":["#### 역전파(1)\n","\n","##  $\\  Y = X \\bullet W$\n","- $X :\\ \\ (2,\\ )$\n","\n","- $W :\\ \\ (2,\\ 3)$\n","\n","- $X \\bullet W :\\ \\ (3,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial Y} :\\ \\ (3,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial X} = \\frac{\\partial L}{\\partial Y}\\bullet W^T ,\\ (2,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial W} = X^T \\bullet \\frac{\\partial L}{\\partial Y} ,\\ (2,\\ 3)$\n","\n"]},{"cell_type":"code","metadata":{"id":"DCruMHCGJSHK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002407,"user_tz":-540,"elapsed":27,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"4a5a76e1-ab52-4bf7-8749-a49154ebae24"},"source":["X = np.random.randn(2)\n","W  = np.random.randn(2,3)\n","Y = np.dot(X, W)\n","\n","print(\"X\\n{}\".format(X))\n","print(\"W\\n{}\".format(W))\n","print(\"Y\\n{}\".format(Y))"],"execution_count":111,"outputs":[{"output_type":"stream","name":"stdout","text":["X\n","[-0.60025385  0.94743982]\n","W\n","[[ 0.291034   -0.63555974 -1.02155219]\n"," [-0.16175539 -0.5336488  -0.00552786]]\n","Y\n","[-0.32794777 -0.12410295  0.60795332]\n"]}]},{"cell_type":"code","metadata":{"id":"TEvyFXedJWC7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002408,"user_tz":-540,"elapsed":24,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"6269fa30-3ce9-43d1-aac9-74b53744eb40"},"source":["dL_dY = np.random.randn(3)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_dW = np.dot(X.reshape(-1, 1), dL_dY.reshape(1,-1))\n","\n","print(\"dL_dY\\n{}\".format(dL_dY))\n","print(\"dL_dX\\n{}\".format(dL_dX))\n","print(\"dL_dW\\n{}\".format(dL_dW))"],"execution_count":112,"outputs":[{"output_type":"stream","name":"stdout","text":["dL_dY\n","[-0.22945045  0.38934891 -1.26511911]\n","dL_dX\n","[ 0.97815283 -0.16366733]\n","dL_dW\n","[[ 0.13772852 -0.23370818  0.75939262]\n"," [-0.2173905   0.36888466 -1.19862423]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"uuOVqySWJauS"},"source":["#### 역전파(2)\n","\n","## $\\ (2)\\  Y = X \\bullet W + B$\n","- $X, W$는 위와 동일\n","\n","- $B: \\ (3, )$\n","\n","- $\\frac{\\partial L}{\\partial B} = \\frac{\\partial L}{\\partial Y}, \\ (3,\\ )$"]},{"cell_type":"code","metadata":{"id":"D_Jb9sY8JYGB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002408,"user_tz":-540,"elapsed":21,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"1f6793b8-a9e8-46bd-9e79-d1625141008c"},"source":["X =  np.random.randn(2)\n","W = np.random.randn(2,3)\n","B = np.random.randn(3)\n","Y = np.dot(X, W) + B\n","print(Y)"],"execution_count":113,"outputs":[{"output_type":"stream","name":"stdout","text":["[-2.03825128 -5.50681371  2.23186693]\n"]}]},{"cell_type":"code","metadata":{"id":"frdvKz8oJcoZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002408,"user_tz":-540,"elapsed":19,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"122edca0-77dd-4c4f-efeb-533a3b2c15d2"},"source":["dL_dY = np.random.randn(3)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_dW = np.dot(X.reshape(-1,1), dL_dY.reshape(1,-1))\n","dL_db = dL_dY\n","\n","print(\"dL_dY\\n{}\".format(dL_dY))\n","print(\"dL_dX\\n{}\".format(dL_dX))\n","print(\"dL_dW\\n{}\".format(dL_dW))\n","print(\"dL_db\\n{}\".format(dL_db))"],"execution_count":114,"outputs":[{"output_type":"stream","name":"stdout","text":["dL_dY\n","[-1.1305523   0.13442888  0.58212279]\n","dL_dX\n","[-0.80678764  1.37837194]\n","dL_dW\n","[[-1.23455437  0.1467953   0.63567359]\n"," [-3.14102821  0.37348552  1.61731935]]\n","dL_db\n","[-1.1305523   0.13442888  0.58212279]\n"]}]},{"cell_type":"markdown","metadata":{"id":"0FrBSUsRJgFl"},"source":["#### 배치용 행렬 내적 계층\n","- N개의 데이터에 대해,  \n","# $\\qquad Y = X \\bullet W + B$\n","\n","  - $X : \\quad  (N,\\ 3)$\n","\n","  - $W : \\quad  (3,\\ 2)$\n","\n","  - $B : \\quad  (2,\\ )$\n","  "]},{"cell_type":"code","metadata":{"id":"AoWx5fDnJd-2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002408,"user_tz":-540,"elapsed":17,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"fc3a01ab-bc61-4503-d418-7d701e6e1c1f"},"source":["X = np.random.rand(4,3)\n","W = np.random.rand(3,2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)"],"execution_count":115,"outputs":[{"output_type":"stream","name":"stdout","text":["(4, 3)\n","(3, 2)\n","(2,)\n"]}]},{"cell_type":"code","metadata":{"id":"EqhSX54BJmPQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002408,"user_tz":-540,"elapsed":15,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"dc3a477f-2736-4373-d606-5f2d75b63e2c"},"source":["print(\"X\\n{}\".format(X))\n","print(\"X\\n{}\".format(W))\n","print(\"X\\n{}\".format(B))"],"execution_count":116,"outputs":[{"output_type":"stream","name":"stdout","text":["X\n","[[0.72900717 0.77127035 0.07404465]\n"," [0.35846573 0.11586906 0.86310343]\n"," [0.62329813 0.33089802 0.06355835]\n"," [0.31098232 0.32518332 0.72960618]]\n","X\n","[[0.63755747 0.88721274]\n"," [0.47221493 0.11959425]\n"," [0.71324479 0.76078505]]\n","X\n","[0.5612772  0.77096718]\n"]}]},{"cell_type":"code","metadata":{"id":"_1IOOfhuJqF-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002408,"user_tz":-540,"elapsed":13,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"3e36e04d-a221-4fe3-f244-6620e485608e"},"source":["Y = np.dot(X, W) + B\n","\n","print(\"Y\\n{}\".format(Y))\n","print(\"Y.shape:\", Y.shape)"],"execution_count":117,"outputs":[{"output_type":"stream","name":"stdout","text":["Y\n","[[1.4430785  1.56632319]\n"," [1.46013882 1.759496  ]\n"," [1.16025322 1.41189296]\n"," [1.43349052 1.64083818]]\n","Y.shape: (4, 2)\n"]}]},{"cell_type":"code","metadata":{"id":"TOKsN2NHJrqT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002409,"user_tz":-540,"elapsed":12,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"ea9b064c-4de6-4826-c5d3-266607cf4400"},"source":["dL_dY = np.random.randn(4,2)\n","dL_dX = np.dot(dL_dY, W.T)\n","\n","dL_dW = np.dot(X.T, dL_dY)\n","dL_db = np.sum(dL_dY, axis = 0)\n","\n","print(\"dL_dY\\n{}\".format(dL_dY))\n","print(\"dL_dY\\n{}\".format(dL_dX))\n","print(\"dL_dY\\n{}\".format(dL_dW))\n","print(\"dL_dY\\n{}\".format(dL_db))"],"execution_count":118,"outputs":[{"output_type":"stream","name":"stdout","text":["dL_dY\n","[[ 0.88774846  3.37229625]\n"," [-0.92039081 -0.39863839]\n"," [-0.06086409 -1.41875046]\n"," [ 1.04249162  0.90353249]]\n","dL_dY\n","[[ 3.55793487  0.8225153   3.19877453]\n"," [-0.94047909 -0.48229713 -0.95974207]\n"," [-1.29753784 -0.19841532 -1.12277513]\n"," [ 1.46627386  0.60033739  1.43094572]]\n","dL_dY\n","[[0.60350642 1.71220807]\n"," [0.89691033 2.37911422]\n"," [0.02808047 0.47468379]]\n","dL_dY\n","[0.94898518 2.4584399 ]\n"]}]},{"cell_type":"code","metadata":{"id":"YjIYrXGaJtEz","executionInfo":{"status":"ok","timestamp":1668049002409,"user_tz":-540,"elapsed":10,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class Layer():\n","  def __init__(self):\n","    self.W = np.random.randn(3,2)\n","    self.b = np.random.randn(2)\n","    self.x = None\n","    self.dW = None\n","    self.db = None\n","\n","  def forward(self, x):\n","    self.x = x\n","    out = np.dot(x, self.W) + self.b\n","    return out\n","  \n","  def backward(self, dout):\n","    dx = np.dot(dout, self.W.T)\n","    self.dW = np.dot(self.x.T,dout)\n","    self.db = np.sum(dout, axis=0)\n","\n","    return dx"],"execution_count":119,"outputs":[]},{"cell_type":"code","metadata":{"id":"twG43EylJvC-","executionInfo":{"status":"ok","timestamp":1668049002409,"user_tz":-540,"elapsed":10,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["np.random.seed(111)\n","\n","layer = Layer()\n"],"execution_count":120,"outputs":[]},{"cell_type":"code","metadata":{"id":"CrCDxHw5Jw3S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002409,"user_tz":-540,"elapsed":10,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"41779da7-7dbd-4095-eead-12ad1605529f"},"source":["X = np.random.rand(2,3)\n","Y = layer.forward(X)\n","\n","print(X)"],"execution_count":121,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.23868214 0.33765619 0.99071246]\n"," [0.23772645 0.08119266 0.66960024]]\n"]}]},{"cell_type":"code","metadata":{"id":"boKm8OIgJyJy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668049002409,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"316efb09-b127-4349-f075-a79b81562fc2"},"source":["dout = np.random.rand(2,2)\n","dout_dx = layer.backward(dout)\n","\n","print(dout_dx)"],"execution_count":122,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-0.59898814  0.83225859 -0.61525238]\n"," [-0.48312871  0.65565961 -0.42154775]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"Bz-0zFPpJ3Jz"},"source":["### MNIST 분류 with 역전파\n"]},{"cell_type":"markdown","metadata":{"id":"eW3InPxBJ6qo"},"source":["#### Modules Import"]},{"cell_type":"code","metadata":{"id":"ZKtAhkm4J2Z3","executionInfo":{"status":"ok","timestamp":1668051914184,"user_tz":-540,"elapsed":429,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["import tensorflow as tf\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","plt.style.use('seaborn-white')\n","from collections import OrderedDict"],"execution_count":182,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F1_2_jGMKGiT"},"source":["#### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"S3SQq80sJ8mR","executionInfo":{"status":"ok","timestamp":1668051914676,"user_tz":-540,"elapsed":2,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["np.random.seed(42)\n","\n","mnist = tf.keras.datasets.mnist\n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","\n","num_classes = 10"],"execution_count":183,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mv_pjKdxKKIy"},"source":["#### 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"B95lI86tKIyY","executionInfo":{"status":"ok","timestamp":1668051915099,"user_tz":-540,"elapsed":9,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["X_train, X_test = X_train.reshape(-1, 28 * 28).astype(np.float32), X_test.reshape(-1, 28*28).astype(np.float32)\n","\n","X_train /= .255\n","X_test /= .255\n","\n","y_train = np.eye(num_classes)[y_train]"],"execution_count":184,"outputs":[]},{"cell_type":"code","metadata":{"id":"ar7DZIlMKLjJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668051915099,"user_tz":-540,"elapsed":8,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"b466e586-5800-482e-cebf-caa68014be2f"},"source":["print(X_train.shape)\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)"],"execution_count":185,"outputs":[{"output_type":"stream","name":"stdout","text":["(60000, 784)\n","(60000, 10)\n","(10000, 784)\n","(10000,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"Oye4pC82KPbg"},"source":["#### Hyper Parameters"]},{"cell_type":"code","metadata":{"id":"rFeXORJjKM7s","executionInfo":{"status":"ok","timestamp":1668051915099,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["epochs = 1000\n","learning_rate = 1e-3\n","batch_size = 100\n","train_size = X_train.shape[0]"],"execution_count":186,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cIdzuyRDKSm0"},"source":["#### Util Functions"]},{"cell_type":"code","metadata":{"id":"8E2_fN1dKRzv","executionInfo":{"status":"ok","timestamp":1668051915099,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["def softmax(x):\n","  if x.ndim == 2:\n","    x = x.T\n","    x = x - np.amax(x, axis = 0)\n","    y = np.exp(x) / np.sum(np.exp(x), axis=0)\n","    return y.T\n","\n","  x = x - np.max(x)\n","  return np.exp(x) / np.sum(np.exp(x))\n","\n","def mean_squared_error(pred_y, true_y):\n","    return 0.5 * np.sum((pred_y - true_y)**2)\n","  \n","def cross_entropy_error(pred_y, true_y):\n","    if pred_y.ndim ==1:\n","      true_y = true_y.reshape(1, true_y.size)\n","      pred_y = pred_y.reshape(1, pred_y.size)\n","\n","    if true_y.size == pred_y.size:\n","      true_y = true_y.argmax(axis=1)\n","    \n","    batch_size = pred_y.shape[0]\n","    return -np.sum(np.log(pred_y[np.arange(batch_size), true_y] + 1e-7)) / batch_size\n","\n","def softmax_loss(X, true_y):\n","    pred_y = softmax(X)\n","    return cross_entropy_error(pred_y, true_y)"],"execution_count":187,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SBvWUNh-KY2R"},"source":["#### Util Classes"]},{"cell_type":"markdown","metadata":{"id":"rc0sLXWJs8Dq"},"source":["##### ReLU"]},{"cell_type":"code","metadata":{"id":"ej2m6Robs-uJ","executionInfo":{"status":"ok","timestamp":1668051915100,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class ReLU():\n","  def __init__(self):\n","    self.out = None\n","    \n","  def forward(self, x):\n","    self.mask = (x <0)\n","    out = x.copy()\n","    out[x<0] = 0\n","    return out\n","  \n","  def backward(self, dout):\n","    dout[self.mask] = 0\n","    dx = dout\n","    return dx"],"execution_count":188,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RucLfG0EtYcf"},"source":["##### Sigmoid"]},{"cell_type":"code","metadata":{"id":"TWoPmtpNtZ__","executionInfo":{"status":"ok","timestamp":1668051915100,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class Sigmoid():\n","  def __init__(self):\n","    self.out = None\n","  \n","  def forward(self, x):\n","    out = 1 / (1 + np.exp(-x))\n","    return out\n","  \n","  def backward(self, dout):\n","    dx = dout * (1.0 - self.out) * self.dout\n","    return dx"],"execution_count":189,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IZZeNtd-tuM5"},"source":["##### Layer"]},{"cell_type":"code","metadata":{"id":"NEcCZ4bFtzgq","executionInfo":{"status":"ok","timestamp":1668051915100,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class Layer():\n","  def __init__(self, W, b):\n","    self.W = W\n","    self.b = b\n","\n","    self.x = None\n","    self.origin_x_shape = None\n","\n","    self.dL_dW = None\n","    self.dL_db = None\n","\n","  def forward(self,x):\n","    self.origin_x_shape = x.shape\n","    \n","    x = x.reshape(x.shape[0], -1)\n","    self.x = x\n","    out = np.dot(self.x, self.W) + self.b\n","\n","    return out\n","\n","  def backward(self, dout):\n","    dx = np.dot(dout, self.W.T)\n","    self.dL_dW = np.dot(self.x.T, dout)\n","    self.dL_db = np.sum(dout, axis=0)\n","    dx = dx.reshape(*self.origin_x_shape)\n","    return dx\n","\n","\n","    "],"execution_count":190,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s1Yqp7kVvOoD"},"source":["#### Softmax"]},{"cell_type":"code","metadata":{"id":"0RXBVEMdvP9r","executionInfo":{"status":"ok","timestamp":1668051915100,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class Softmax():\n","  def __init__(self):\n","    self.loss = None\n","    self.y = None\n","    self.t = None\n","\n","  def forward(self, x, t):\n","    self.t = t\n","    self.y = softmax(x)\n","    self.loss = cross_entropy_error(self.y, self.t)\n","\n","    return self.loss\n","\n","  def backward(self, dout=1):\n","    batch_size = self.t.shape[0]\n","\n","    if self.t.size == self.y.size:\n","      dx = (self.y - self.t) / batch_size\n","    else:\n","      dx = self.y.copy()\n","      dx[np.arange(batch_size), self.t] -= 1\n","      dx = dx / batch_size\n","    return dx\n"],"execution_count":191,"outputs":[]},{"cell_type":"code","metadata":{"id":"sX4I-bKfuRaq","executionInfo":{"status":"ok","timestamp":1668051915100,"user_tz":-540,"elapsed":6,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["class MyModel():\n","  def __init__(self, input_size, hidden_size_list, output_size, activation = 'relu'):\n","    self.input_size = input_size\n","    self.output_size = output_size\n","    self.hidden_size_list = hidden_size_list\n","    self.hidden_layer_num = len(hidden_size_list)\n","    self.params = {}\n","\n","    self.__init_weights(activation)\n","\n","    activation_layer = {'sigmoid': Sigmoid, 'relu': ReLU}\n","    self.layers = OrderedDict()\n","    for idx in range(1, self.hidden_layer_num + 1):\n","      self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","      self.layers['Activation_fuction' + str(idx)] = activation_layer[activation]()\n","\n","    idx = self.hidden_layer_num + 1\n","\n","    self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","    \n","    self.last_layer = Softmax()\n","\n","  def __init_weights(self,activation):\n","    weight_std = None\n","    all_size_list = [self.input_size] + self.hidden_size_list + [self.output_size]\n","    for idx in range(1, len(all_size_list)):\n","      if activation.lower() == \"relu\":\n","        weight_std = np.sqrt(2.0 / self.input_size)\n","      elif activation.lower() == 'sigmoid':\n","        weight_std = np.sqrt(1.0 / self.input_size)\n","\n","      self.params['W' + str(idx)] = weight_std * np.random.randn(all_size_list[idx-1], all_size_list[idx])\n","      self.params['b' + str(idx)] = np.random.randn(all_size_list[idx])\n","\n","  def predict(self, x):\n","    for layer in self.layers.values():\n","      x = layer.forward(x)\n","    return x\n","\n","  def loss(self, x, true_y):\n","    pred_y = self.predict(x)\n","\n","    return self.last_layer.forward(pred_y, true_y)\n","\n","  def accuracy(self, x, true_y):\n","    pred_y = self.predict(x)\n","    pred_y = np.argmax(pred_y, axis=1)\n","\n","    if true_y.ndim != 1:\n","      true_y = np.argmax(true_y, axis = 1)\n","\n","    accuracy = np.sum(pred_y == true_y) / float(x.shape[0])\n","    return accuracy\n","\n","  def gradient(self, x, t):\n","    self.loss(x, t)\n","\n","    dout = 1\n","    dout = self.last_layer.backward(dout)\n","\n","    layers  = list(self.layers.values())\n","    layers.reverse()\n","    for layer in layers:\n","      dout = layer.backward(dout)\n","\n","    grads = {}\n","    for idx in range(1, self.hidden_layer_num + 2):\n","      grads['W' + str(idx)] = self.layers['Layer' + str(idx)].dL_dW\n","      grads['b' + str(idx)] = self.layers['Layer' + str(idx)].dL_db\n","\n","    return grads"],"execution_count":192,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LwyNo3TsyDZR"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"Du5naLufxMvv","executionInfo":{"status":"ok","timestamp":1668051915100,"user_tz":-540,"elapsed":6,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["model = MyModel(28*28, [100, 64, 32], 10, activation = 'relu')"],"execution_count":193,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rb0HhW9x0mrN","executionInfo":{"status":"ok","timestamp":1668051915101,"user_tz":-540,"elapsed":7,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}}},"source":["train_loss_list =[]\n","train_acc_list = []\n","test_acc_list = []\n"],"execution_count":194,"outputs":[]},{"cell_type":"code","metadata":{"id":"VV5PciwAxM6s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668051941093,"user_tz":-540,"elapsed":25998,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"7ad1c510-cd15-461c-ec57-b0f8031f048d"},"source":["for epoch in range(epochs):\n","  batch_mask = np.random.choice(train_size, batch_size)\n","  x_batch = X_train[batch_mask]\n","  y_batch = y_train[batch_mask]\n","\n","  grad = model.gradient(x_batch, y_batch)\n","\n","  for key in model.params.keys():\n","    model.params[key] -= learning_rate * grad[key]\n","\n","  loss = model.loss(x_batch, y_batch)\n","  train_loss_list.append(loss)\n","\n","  if epoch % 50 == 0:\n","    train_acc = model.accuracy(X_train, y_train)\n","    test_acc = model.accuracy(X_test, y_test)\n","    train_acc_list.append(train_acc)\n","    test_acc_list.append(test_acc)\n","    print(\"Epoch: {} Train Accuracy: {:.4f} Test Accuracy: {:.4f}\".format(epoch+1, train_acc, test_acc))"],"execution_count":195,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 1 Train Accuracy: 0.1279 Test Accuracy: 0.1410\n","Epoch: 51 Train Accuracy: 0.6243 Test Accuracy: 0.6368\n","Epoch: 101 Train Accuracy: 0.7079 Test Accuracy: 0.7168\n","Epoch: 151 Train Accuracy: 0.7572 Test Accuracy: 0.7665\n","Epoch: 201 Train Accuracy: 0.7853 Test Accuracy: 0.7972\n","Epoch: 251 Train Accuracy: 0.8019 Test Accuracy: 0.8104\n","Epoch: 301 Train Accuracy: 0.8177 Test Accuracy: 0.8259\n","Epoch: 351 Train Accuracy: 0.8331 Test Accuracy: 0.8364\n","Epoch: 401 Train Accuracy: 0.8417 Test Accuracy: 0.8471\n","Epoch: 451 Train Accuracy: 0.8498 Test Accuracy: 0.8521\n","Epoch: 501 Train Accuracy: 0.8593 Test Accuracy: 0.8625\n","Epoch: 551 Train Accuracy: 0.8565 Test Accuracy: 0.8581\n","Epoch: 601 Train Accuracy: 0.8690 Test Accuracy: 0.8704\n","Epoch: 651 Train Accuracy: 0.8676 Test Accuracy: 0.8682\n","Epoch: 701 Train Accuracy: 0.8746 Test Accuracy: 0.8744\n","Epoch: 751 Train Accuracy: 0.8797 Test Accuracy: 0.8784\n","Epoch: 801 Train Accuracy: 0.8787 Test Accuracy: 0.8759\n","Epoch: 851 Train Accuracy: 0.8844 Test Accuracy: 0.8841\n","Epoch: 901 Train Accuracy: 0.8861 Test Accuracy: 0.8850\n","Epoch: 951 Train Accuracy: 0.8917 Test Accuracy: 0.8909\n"]}]},{"cell_type":"code","metadata":{"id":"dqqlZOF6KjDl","colab":{"base_uri":"https://localhost:8080/","height":291},"executionInfo":{"status":"ok","timestamp":1668051941094,"user_tz":-540,"elapsed":19,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"008aeb6a-6480-4ba8-86d1-a695fbfedf74"},"source":["plt.plot(np.arange(1000//50), train_acc_list, 'r--', label = 'train_acc')\n","plt.plot(np.arange(1000//50), test_acc_list, 'b', label='trest_acc')\n","\n","plt.title('Result')\n","plt.xlabel('Epochs')\n","plt.legend(loc = 5)\n","plt.grid()\n","plt.show()"],"execution_count":196,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"_BwHrt9nP8y8","executionInfo":{"status":"ok","timestamp":1668052110171,"user_tz":-540,"elapsed":430,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"colab":{"base_uri":"https://localhost:8080/","height":291},"outputId":"df249de3-0743-45d1-c9a5-094bf8e7f77d"},"source":["plt.plot(np.arange(1000), train_loss_list, 'green', label = 'train_loss')\n","plt.title('Train Loss')\n","plt.xlabel('Epochs')\n","plt.legend(loc = 5)\n","plt.grid()\n","plt.show()"],"execution_count":197,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}