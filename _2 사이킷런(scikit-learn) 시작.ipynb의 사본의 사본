{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"10yp9-8ZtDjfVuh0H1lU5N9nA1y60eLzj","timestamp":1666328393027}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Bwm3Ce3oIgYi"},"source":["# 사이킷런(scikit-learn) 시작\n","\n","![scikit-learn logo.png](https://drive.google.com/uc?id=1Aeb0mBJzYgz7UGmHAdGsQJF44EM9mNTD)"]},{"cell_type":"markdown","metadata":{"id":"UhF1mufkp8TQ"},"source":["## scikit-learn 특징\n","\n","* 다양한 머신러닝 알고리즘을 구현한 파이썬 라이브러리\n","* 심플하고 일관성 있는 API, 유용한 온라인 문서, 풍부한 예제\n","* 머신러닝을 위한 쉽고 효율적인 개발 라이브러리 제공\n","* 다양한 머신러닝 관련 알고리즘과 개발을 위한 프레임워크와 API 제공\n","* 많은 사람들이 사용하며 다양한 환경에서 검증된 라이브러리"]},{"cell_type":"markdown","metadata":{"id":"19ORAlQckvSb"},"source":["## scikit-learn 주요 모듈"]},{"cell_type":"markdown","metadata":{"id":"n4luZ6ock5rm"},"source":["| 모듈 | 설명 |\n","|------|------|\n","| `sklearn.datasets` | 내장된 예제 데이터 세트 |\n","| `sklearn.preprocessing` | 다양한 데이터 전처리 기능 제공 (변환, 정규화, 스케일링 등) |\n","| `sklearn.feature_selection` | 특징(feature)를 선택할 수 있는 기능 제공 | \n","| `sklearn.feature_extraction` | 특징(feature) 추출에 사용 |\n","| `sklearn.decomposition` | 차원 축소 관련 알고리즘 지원 (PCA, NMF, Truncated SVD 등)\n","| `sklearn.model_selection` | 교차 검증을 위해 데이터를 학습/테스트용으로 분리, 최적 파라미터를 추출하는 API 제공 (GridSearch 등)\n","| `sklearn.metrics` | 분류, 회귀, 클러스터링, Pairwise에 대한 다양한 성능 측정 방법 제공 (Accuracy, Precision, Recall, ROC-AUC, RMSE 등) |\n","| `sklearn.pipeline` | 특징 처리 등의 변환과 ML 알고리즘 학습, 예측 등을 묶어서 실행할 수 있는 유틸리티 제공 |\n","| `sklearn.linear_model` | 선형 회귀, 릿지(Ridge), 라쏘(Lasso), 로지스틱 회귀 등 회귀 관련 알고리즘과 SGD(Stochastic Gradient Descent) 알고리즘 제공 |\n","| `sklearn.svm` | 서포트 벡터 머신 알고리즘 제공 |\n","| `sklearn.neighbors` | 최근접 이웃 알고리즘 제공 (k-NN 등)\n","| `sklearn.naive_bayes` | 나이브 베이즈 알고리즘 제공 (가우시안 NB, 다항 분포 NB 등) |\n","| `sklearn.tree` | 의사 결정 트리 알고리즘 제공 |\n","| `sklearn.ensemble` | 앙상블 알고리즘 제공 (Random Forest, AdaBoost, GradientBoost 등) |\n","| `sklearn.cluster` | 비지도 클러스터링 알고리즘 제공 (k-Means, 계층형 클러스터링, DBSCAN 등)"]},{"cell_type":"markdown","metadata":{"id":"ikDZ-kpFo06o"},"source":["## `estimator` API\n","\n","* 일관성: 모든 객체는 일관된 문서를 갖춘 제한된 메서드 집합에서 비롯된 공통 인터페이스 공유\n","* 검사(inspection): 모든 지정된 파라미터 값은 공개 속성으로 노출\n","* 제한된 객체 계층 구조\n","  + 알고리즘만 파이썬 클래스에 의해 표현\n","  + 데이터 세트는 표준 포맷(NumPy 배열, Pandas DataFrame, Scipy 희소 행렬)으로 표현\n","  + 매개변수명은 표준 파이썬 문자열 사용\n","* 구성: 많은 머신러닝 작업은 기본 알고리즘의 시퀀스로 나타낼 수 있으며, Scikit-Learn은 가능한 곳이라면 어디서든 이 방식을 사용\n","* 합리적인 기본값: 모델이 사용자 지정 파라미터를 필요로 할 때 라이브러리가 적절한 기본값을 정의"]},{"cell_type":"markdown","metadata":{"id":"XKXC0zoTrmHM"},"source":["### API 사용 방법\n","\n","1. Scikit-Learn으로부터 적절한 `estimator` 클래스를 임포트해서 모델의 클래스 선택\n","2. 클래스를 원하는 값으로 인스턴스화해서 모델의 하이퍼파라미터 선택\n","3. 데이터를 특징 배열과 대상 벡터로 배치\n","4. 모델 인스턴스의 `fit()` 메서드를 호출해 모델을 데이터에 적합\n","5. 모델을 새 데이터에 대해서 적용\n","  + 지도 학습: 대체로 `predict()` 메서드를 사용해 알려지지 않은 데이터에 대한 레이블 예측\n","  + 비지도 학습: 대체로 `transform()`이나 `predict()` 메서드를 사용해 데이터의 속성을 변환하거나 추론"]},{"cell_type":"markdown","metadata":{"id":"0WgAOokAPVvG"},"source":["![scikit-learn](https://scikit-learn.org/stable/_static/ml_map.png)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"3lEfpb55skvd"},"source":["### API 사용 예제"]},{"cell_type":"code","metadata":{"id":"Bxt8A5iQoHbc"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ct9fa3T_s6nV"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4mYOpr_XubH2"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ciPMcnzzzkDY"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t7OWKXAbz7nd"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KYDjfXEf0Fqt"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vw8MU5Ug0JDl"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yxUYZU4f0Ktg"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pIq6q0lb1oyD"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bsBjQcoIl_6B"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"29de3S_Kon64"},"source":["## 예제 데이터 세트"]},{"cell_type":"markdown","metadata":{"id":"Bb8VoXDioqmL"},"source":["### 분류 또는 회귀용 데이터 세트\n","\n","| API | 설명 |\n","|-----|------|\n","| `datasets.load_boston()` | 미국 보스턴의 집에 대한 특징과 가격 데이터 (회귀용) |\n","| `datasets.load_breast_cancer()` | 위스콘신 유방암 특징들과 악성/음성 레이블 데이터 (분류용) |\n","| `datasets.load_diabetes()` | 당뇨 데이터 (회귀용) |\n","| `datasets.load_digits()` | 0에서 9까지 숫자 이미지 픽셀 데이터 (분류용) |\n","| `datasets.load_iris()` | 붓꽃에 대한 특징을 가진 데이터 (분류용) |"]},{"cell_type":"markdown","metadata":{"id":"LbpkiHGK1Tce"},"source":["### 온라인 데이터 세트\n","\n","* 데이터 크기가 커서 온라인에서 데이터를 다운로드 한 후에 불러오는 예제 데이터 세트\n","\n","| API | 설명 |\n","|-----|------|\n","| `fetch_california_housing()` | 캘리포니아 주택 가격 데이터 |\n","| `fetch_covtype()` | 회귀 분석용 토지 조사 데이터 |\n","| `fetch_20newsgroups()` | 뉴스 그룹 텍스트 데이터 |\n","| `fetch_olivetti_faces()` | 얼굴 이미지 데이터 |\n","| `fetch_lfw_people()` | 얼굴 이미지 데이터 |\n","| `fetch_lfw_paris()` | 얼굴 이미지 데이터 |\n","| `fetch_rcv1()` | 로이터 뉴스 말뭉치 데이터 |\n","| `fetch_mldata()` | ML 웹사이트에서 다운로드 |"]},{"cell_type":"markdown","metadata":{"id":"sRecl-l_1UFE"},"source":["### 분류와 클러스터링을 위한 표본 데이터 생성\n","\n","| API | 설명 |\n","|-----|------|\n","| `datasets.make_classifications()` | 분류를 위한 데이터 세트 생성. 높은 상관도, 불필요한 속성 등의 노이즈를 고려한 데이터를 무작위로 생성 |\n","| `datasets.make_blobs()` | 클러스터링을 위한 데이터 세트 생성. 군집 지정 개수에 따라 여러 가지 클러스터링을 위한 데이터 셋트를 무작위로 생성 |"]},{"cell_type":"markdown","metadata":{"id":"gn8I5U0D4tP7"},"source":["### 예제 데이터 세트 구조\n","\n","* 일반적으로 딕셔너리 형태로 구성\n","* data: 특징 데이터 세트\n","* target: 분류용은 레이블 값, 회귀용은 숫자 결과값 데이터\n","* target_names: 개별 레이블의 이름 (분류용)\n","* feature_names: 특징 이름\n","* DESCR: 데이터 세트에 대한 설명과 각 특징 설명"]},{"cell_type":"code","metadata":{"id":"J4Xvo4kg6dHS"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yuvZHGQ18cX-"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BRmFh1oP8iKs"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GIg2ZbjG9XBm"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6vLjpUAl8y3Z"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RoSlB1kM8lpR"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sK7Xxb-4-s9r"},"source":["## `model_selection` 모듈\n","\n","* 학습용 데이터와 테스트 데이터로 분리\n","* 교차 검증 분할 및 평가\n","* Estimator의 하이퍼 파라미터 튜닝을 위한 다양한 함수와 클래스 제공"]},{"cell_type":"markdown","metadata":{"id":"WoulI5Vo_C_Y"},"source":["### `train_test_split()`: 학습/테스트 데이터 세트 분리"]},{"cell_type":"code","metadata":{"id":"p6g2drBI_CFw"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8vZFyqaoCpEC"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ngFG3QwGD4e2"},"source":["### `cross_val_score()`: 교차 검증"]},{"cell_type":"code","metadata":{"id":"wnQp6pPTD9JM"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zpgCUVF7XN5x"},"source":["### `GridSearchCV`: 교차 검증과 최적 하이퍼 파라미터 찾기\n","\n","* 훈련 단계에서 학습한 파라미터에 영향을 받아서 최상의 파라미터를 찾는 일은 항상 어려운 문제\n","* 다양한 모델의 훈련 과정을 자동화하고, 교차 검사를 사용해 최적 값을 제공하는 도구 필요"]},{"cell_type":"code","metadata":{"id":"xd96K4CuXMrU"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X6tTVC3sagc9"},"source":["* `multiprocessing`을 이용한 `GridSearchCV`"]},{"cell_type":"code","metadata":{"id":"PKxQLen3aBxT"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M5_bY2inmPfQ"},"source":["## `preprocessing` 데이터 전처리 모듈\n","\n","* 데이터의 특징 스케일링(feature scaling)을 위한 방법으로 표준화(Standardization)와 정규화(Normalization) 사용\n","\n","+ 표준화 방법\n","\n","\\begin{equation}\n","x_i^{'} = \\frac{x_i-mean(x)}{stdev(x)}\n","\\end{equation}\n","\n","+ 정규화 방법\n","\n","\\begin{equation}\n","x_i^{'} = \\frac{x_i-min(x)}{max(x)-min(x)}\n","\\end{equation}\n","\n","+ scikit-learn에서는 개별 벡터 크기를 맞추는 형태로 정규화"]},{"cell_type":"markdown","metadata":{"id":"fzdqo4OSrhDI"},"source":["### `StandardScaler`: 표준화 클래스"]},{"cell_type":"code","source":["import multiprocessing\n","from sklearn.datasets import load_iris\n","from sklearn.linear_model import LogisticRegression\n","\n","iris = load_iris()\n","\n","import pandas as pd\n","\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.datasets import load_diabetes\n","\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"pPTjsl-KZH2K"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S3VZVnnyso1m","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1666319724939,"user_tz":-540,"elapsed":6,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"5a5c8d52-afe5-4a99-b4f1-939f4773bf1e"},"source":["iris = load_iris()\n","iris_df = pd.DataFrame(data=iris.data, columns = iris.feature_names)\n","iris_df.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n","count         150.000000        150.000000         150.000000   \n","mean            5.843333          3.057333           3.758000   \n","std             0.828066          0.435866           1.765298   \n","min             4.300000          2.000000           1.000000   \n","25%             5.100000          2.800000           1.600000   \n","50%             5.800000          3.000000           4.350000   \n","75%             6.400000          3.300000           5.100000   \n","max             7.900000          4.400000           6.900000   \n","\n","       petal width (cm)  \n","count        150.000000  \n","mean           1.199333  \n","std            0.762238  \n","min            0.100000  \n","25%            0.300000  \n","50%            1.300000  \n","75%            1.800000  \n","max            2.500000  "],"text/html":["\n","  <div id=\"df-c150a6a9-50ca-41c0-bc4f-aecf84088658\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>5.843333</td>\n","      <td>3.057333</td>\n","      <td>3.758000</td>\n","      <td>1.199333</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.828066</td>\n","      <td>0.435866</td>\n","      <td>1.765298</td>\n","      <td>0.762238</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.300000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>0.100000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.100000</td>\n","      <td>2.800000</td>\n","      <td>1.600000</td>\n","      <td>0.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>5.800000</td>\n","      <td>3.000000</td>\n","      <td>4.350000</td>\n","      <td>1.300000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.400000</td>\n","      <td>3.300000</td>\n","      <td>5.100000</td>\n","      <td>1.800000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>7.900000</td>\n","      <td>4.400000</td>\n","      <td>6.900000</td>\n","      <td>2.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c150a6a9-50ca-41c0-bc4f-aecf84088658')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c150a6a9-50ca-41c0-bc4f-aecf84088658 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c150a6a9-50ca-41c0-bc4f-aecf84088658');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"rGtTNBFquBIS","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1666320409731,"user_tz":-540,"elapsed":6,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"9be4ccad-cde4-4fbc-ab0a-39bab6301638"},"source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","iris_scaled = scaler.fit_transform(iris_df)\n","iris_df_scaled = pd.DataFrame(data=iris_scaled, columns = iris.feature_names)\n","iris_df_scaled.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n","count       1.500000e+02      1.500000e+02       1.500000e+02   \n","mean       -1.468455e-15     -1.823726e-15      -1.610564e-15   \n","std         1.003350e+00      1.003350e+00       1.003350e+00   \n","min        -1.870024e+00     -2.433947e+00      -1.567576e+00   \n","25%        -9.006812e-01     -5.923730e-01      -1.226552e+00   \n","50%        -5.250608e-02     -1.319795e-01       3.364776e-01   \n","75%         6.745011e-01      5.586108e-01       7.627583e-01   \n","max         2.492019e+00      3.090775e+00       1.785832e+00   \n","\n","       petal width (cm)  \n","count      1.500000e+02  \n","mean      -9.473903e-16  \n","std        1.003350e+00  \n","min       -1.447076e+00  \n","25%       -1.183812e+00  \n","50%        1.325097e-01  \n","75%        7.906707e-01  \n","max        1.712096e+00  "],"text/html":["\n","  <div id=\"df-c0dfd01f-51eb-44ea-8150-7a06a34caa63\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1.500000e+02</td>\n","      <td>1.500000e+02</td>\n","      <td>1.500000e+02</td>\n","      <td>1.500000e+02</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>-1.468455e-15</td>\n","      <td>-1.823726e-15</td>\n","      <td>-1.610564e-15</td>\n","      <td>-9.473903e-16</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.003350e+00</td>\n","      <td>1.003350e+00</td>\n","      <td>1.003350e+00</td>\n","      <td>1.003350e+00</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-1.870024e+00</td>\n","      <td>-2.433947e+00</td>\n","      <td>-1.567576e+00</td>\n","      <td>-1.447076e+00</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-9.006812e-01</td>\n","      <td>-5.923730e-01</td>\n","      <td>-1.226552e+00</td>\n","      <td>-1.183812e+00</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>-5.250608e-02</td>\n","      <td>-1.319795e-01</td>\n","      <td>3.364776e-01</td>\n","      <td>1.325097e-01</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.745011e-01</td>\n","      <td>5.586108e-01</td>\n","      <td>7.627583e-01</td>\n","      <td>7.906707e-01</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2.492019e+00</td>\n","      <td>3.090775e+00</td>\n","      <td>1.785832e+00</td>\n","      <td>1.712096e+00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0dfd01f-51eb-44ea-8150-7a06a34caa63')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c0dfd01f-51eb-44ea-8150-7a06a34caa63 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c0dfd01f-51eb-44ea-8150-7a06a34caa63');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"UwYeH_9k_Rog","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666321308648,"user_tz":-540,"elapsed":311,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"5c585f05-4510-4bc5-aa37-9a889bdba8d6"},"source":["X_train, X_test, y_train, y_test = train_test_split(iris_df_scaled, iris.target, test_size = 0.3)\n","\n","model =LogisticRegression()\n","model.fit(X_train, y_train)\n","\n","print(\"훈련 데이터 점수: {}\".format(model.score(X_train,y_train)))\n","print(\"평가 데이터 점수: {}\".format(model.score(X_test,y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 데이터 점수: 0.9904761904761905\n","평가 데이터 점수: 0.9333333333333333\n"]}]},{"cell_type":"markdown","metadata":{"id":"2TctmHqowvBG"},"source":["### `MinMaxScaler`: 정규화 클래스"]},{"cell_type":"code","metadata":{"id":"u5_id8diw6l-","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1666322735232,"user_tz":-540,"elapsed":5,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"700c410f-499b-4e63-8782-0a9dccc2c9a0"},"source":["from sklearn.preprocessing import MinMaxScaler\n","\n","scaler = MinMaxScaler()\n","iris_scaled = scaler.fit_transform(iris_df)\n","iris_df_scaled = pd.DataFrame(data=iris_scaled, columns=iris.feature_names)\n","iris_df_scaled.describe()\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n","count         150.000000        150.000000         150.000000   \n","mean            0.428704          0.440556           0.467458   \n","std             0.230018          0.181611           0.299203   \n","min             0.000000          0.000000           0.000000   \n","25%             0.222222          0.333333           0.101695   \n","50%             0.416667          0.416667           0.567797   \n","75%             0.583333          0.541667           0.694915   \n","max             1.000000          1.000000           1.000000   \n","\n","       petal width (cm)  \n","count        150.000000  \n","mean           0.458056  \n","std            0.317599  \n","min            0.000000  \n","25%            0.083333  \n","50%            0.500000  \n","75%            0.708333  \n","max            1.000000  "],"text/html":["\n","  <div id=\"df-8c561030-f2cd-4bf9-b165-087e4d0ee685\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.428704</td>\n","      <td>0.440556</td>\n","      <td>0.467458</td>\n","      <td>0.458056</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.230018</td>\n","      <td>0.181611</td>\n","      <td>0.299203</td>\n","      <td>0.317599</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.222222</td>\n","      <td>0.333333</td>\n","      <td>0.101695</td>\n","      <td>0.083333</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.416667</td>\n","      <td>0.416667</td>\n","      <td>0.567797</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>0.583333</td>\n","      <td>0.541667</td>\n","      <td>0.694915</td>\n","      <td>0.708333</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c561030-f2cd-4bf9-b165-087e4d0ee685')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8c561030-f2cd-4bf9-b165-087e4d0ee685 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8c561030-f2cd-4bf9-b165-087e4d0ee685');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"nDmNGhWxy3NN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666323387891,"user_tz":-540,"elapsed":409,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"3dbd8fd3-61f7-4825-bbca-895d45594fe9"},"source":["X_train, X_test, y_train, y_test = train_test_split(iris_df_scaled, iris.target, test_size=0.3)\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","\n","print(\"훈련 데이터 점수: {}\".format(model.score(X_train, y_train)))\n","\n","print(\"평가 데이터 점수: {}\".format(model.score(X_test,y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 데이터 점수: 0.9142857142857143\n","평가 데이터 점수: 0.9333333333333333\n"]}]},{"cell_type":"markdown","metadata":{"id":"GleRpgpOAVPE"},"source":["## 성능 평가 지표"]},{"cell_type":"code","source":["from sklearn.datasets import make_classification\n","from sklearn.linear_model import LogisticRegression\n","\n","X, y = make_classification(n_samples=1000, n_features=2, n_informative = 2, n_redundant=0, n_clusters_per_class=1)\n","X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","\n","print(\"훈련 데이터 점수: {}\".format(model.score(X_train, y_train)))\n","print(\"평가 데이터 점수: {}\".format(model.score(X_test,y_test)))"],"metadata":{"id":"v9LfFexsfixm","executionInfo":{"status":"ok","timestamp":1666324658123,"user_tz":-540,"elapsed":290,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"4a61b3bf-6352-437d-a576-27a53a48859e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 데이터 점수: 0.9914285714285714\n","평가 데이터 점수: 0.9833333333333333\n"]}]},{"cell_type":"markdown","metadata":{"id":"ZW0mVKVBApg5"},"source":["### 정확도(Accuracy)\n","\n","* 정확도는 전체 예측 데이터 건수 중 예측 결과가 동일한 데이터 건수로 계산\n","* scikit-learn에서는 `accuracy_score` 함수를 제공\n","\n"]},{"cell_type":"code","metadata":{"id":"o5bYSmjiBOXK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666325380123,"user_tz":-540,"elapsed":345,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"59d0984f-b96e-4ea7-a362-cf13e838b027"},"source":["from sklearn.datasets import make_classification\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","\n","\n","X, y = make_classification(n_samples=1000, n_features=2, n_informative = 2, n_redundant=0, n_clusters_per_class=1)\n","X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","\n","print(\"훈련 데이터 점수: {}\".format(model.score(X_train, y_train)))\n","print(\"평가 데이터 점수: {}\".format(model.score(X_test,y_test)))\n","\n","predict = model.predict(X_test)\n","print(\"정확도: {}\".format(accuracy_score(y_test, predict)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 데이터 점수: 0.9728571428571429\n","평가 데이터 점수: 0.97\n","정확도: 0.97\n"]}]},{"cell_type":"markdown","metadata":{"id":"lEsjYTnbDR3A"},"source":["### 오차 행렬(Confusion Matrix)\n","\n","* True Negative: 예측값을 Negative 값 0으로 예측했고, 실제 값도 Negative 값 0\n","* False Positive: 예측값을 Positive 값 1로 예측했는데, 실제 값은 Negative 값 0\n","* False Negative: 예측값을 Negative 값 0으로 예측했는데, 실제 값은 Positive 값 1\n","* True Positive: 예측값을 Positive 값 1로 예측했고, 실제 값도 Positive 값 1"]},{"cell_type":"code","metadata":{"id":"pYeVwfICEKcL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666325704841,"user_tz":-540,"elapsed":337,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"51a83681-c25a-450f-f559-6930e736a33b"},"source":["from sklearn.metrics import confusion_matrix\n","\n","confmat = confusion_matrix(y_true=y_test, y_pred=predict)\n","print(confmat)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[139   1]\n"," [  8 152]]\n"]}]},{"cell_type":"code","metadata":{"id":"ow3jcKmgEspA","colab":{"base_uri":"https://localhost:8080/","height":189},"executionInfo":{"status":"ok","timestamp":1666326060068,"user_tz":-540,"elapsed":848,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"0eee3280-992a-48e0-93ec-f894fe879eb6"},"source":["fig, ax = plt.subplots(figsize = (2.5,2.5))\n","ax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\n","for i in range(confmat.shape[0]):\n","  for j in range(confmat.shape[1]):\n","    ax.text(x=j, y=i, s=confmat[i,j], va='center', ha='center')\n","\n","\n","plt.xlabel('Predicted label')\n","plt.ylabel('True label')\n","plt.tight_layout()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 180x180 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"LLf4sth1FsQ_"},"source":["### 정밀도(Precision)와 재현율(Recall)\n","\n","* 정밀도 = TP / (FP + TP)\n","* 재현율 = TP / (FN + TP)\n","\n","* 정확도 = (TN + TP) / (TN + FP + FN + TP)\n","* 오류율 = (FN + FP) / (TN + FP + FN + TP)"]},{"cell_type":"code","metadata":{"id":"liPg5IBuGhpj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666326522408,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"0daa8b52-ef56-4c55-b19e-640a5742c5ba"},"source":["from sklearn.metrics import precision_score, recall_score\n","\n","precision = precision_score(y_test, predict)\n","recall = recall_score(y_test, predict)\n","\n","print(\"정밀도 : {}\".format(precision))\n","print(\"재현율: {}\".format(recall))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["정밀도 : 0.9934640522875817\n","재현율: 0.95\n"]}]},{"cell_type":"markdown","metadata":{"id":"iFeWdm3ZK-vW"},"source":["### F1 Score(F-measure)\n","\n","* 정밀도와 재현율을 결합한 지표\n","* 정밀도와 재현율이 어느 한쪽으로 치우치지 않을 때 높은 값을 가짐\n","\n","\\begin{equation}\n","F1 = 2 \\times \\frac{precision \\times recall}{precision + recall}\n","\\end{equation}\n"]},{"cell_type":"code","metadata":{"id":"f5atW1FDLu-s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666327067912,"user_tz":-540,"elapsed":348,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"a15d1dc4-1712-4ebc-b256-079637e009ae"},"source":["from sklearn.metrics import f1_score\n","\n","f1 = f1_score(y_test, predict)\n","\n","print(\"F1 Score: {}\".format(f1))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["F1 Score: 0.9712460063897763\n"]}]},{"cell_type":"markdown","metadata":{"id":"OtgHCc08OAKp"},"source":["### ROC 곡선과 AUC\n","\n","* ROC 곡선은 FPR(False Positive Rate)이 변할 때 TPR(True Positive Rate)이 어떻게 변하는지 나타내는 곡선\n","  + TPR(True Positive Rate): TP / (FN + TP), 재현율\n","  + TNR(True Negative Rate): TN / (FP + TN)\n","  + FPR(False Positive Rate): FP / (FP + TN), 1 - TNR\n","\n","* AUC(Area Under Curve) 값은 ROC 곡선 밑에 면적을 구한 값 (1이 가까울수록 좋은 값)"]},{"cell_type":"code","metadata":{"id":"qqVAbkiNU1UL","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1666328291883,"user_tz":-540,"elapsed":572,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"dc2b8b80-292d-450f-d79e-3a2ecd21c126"},"source":["from sklearn.metrics import roc_curve\n","\n","pred_proba_class1 = model.predict_proba(X_test)[:, 1]\n","fprs, tprs, thresholds = roc_curve(y_test, pred_proba_class1)\n","start, end = plt.xlim()\n","\n","plt.plot(fprs, tprs, label = 'ROC')\n","plt.plot([0,1],[0,1], '--k', label='Random')\n","start_end = plt.xlim()\n","plt.xticks(np.round(np.arange(start, end, 0.1), 2))\n","plt.xlim(0,1)\n","plt.ylim(0,1)\n","plt.xlabel('FRR(1-Sensitivity')\n","plt.ylabel('TPR(Recall')\n","plt.legend();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WYMKyuPKWFNF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666328376126,"user_tz":-540,"elapsed":3,"user":{"displayName":"‍심서현[ 학부휴학 / 영어영문학과 ]","userId":"03317337495555700739"}},"outputId":"e252c50b-5351-4e93-857d-00721e8cc6c4"},"source":["from sklearn.metrics import roc_auc_score\n","\n","roc_auc = roc_auc_score(y_test, predict)\n","print(\"ROC AIC Score: {}\".format(roc_auc))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ROC AIC Score: 0.9714285714285715\n"]}]},{"cell_type":"markdown","metadata":{"id":"R0H5n_UgMIx8"},"source":["## 참고문헌\n","\n","* scikit-learn 사이트: https://scikit-learn.org/\n","* Jake VanderPlas, \"Python Data Science Handbook\", O'Reilly\n","* Sebastian Raschka, Vahid Mirjalili, \"Python Machine Learning\", Packt\n","* Giuseppe Bonaccorso, \"Machine Learning Algorithm\", Packt\n","* Aurelien Geron, \"Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems\", O'Reilly"]}]}