{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yURN8yVBax7qoHttCZoDkD93TxWdaZK_","timestamp":1671355447012}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"f9Xx-jP92OgP"},"source":["# 파이토치(PyTorch)\n","\n","<img src=\"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbuUgoV%2FbtqwWZvcHHX%2Fd6XzIFBEfiuFb0UvyV4A50%2Fimg.jpg\" width=\"300\">\n","\n","- 코드 출처: https://pytorch.org/tutorials/"]},{"cell_type":"markdown","metadata":{"id":"3cxreguz2sL0"},"source":["## 파이토치의 구성요소\n","\n","- `torch`: 텐서를 생성하는 라이브러리\n","\n","- `torch.autograd`: 자동미분 기능을 제공하는 라이브러리\n","\n","- `torch.nn`: 신경망을 생성하는 라이브러리\n","\n","- `torch.multiprocessing`: 병럴처리 기능을 제공하는 라이브러리\n","\n","- `torch.utils`: 데이터 조작 등 유틸리티 기능 제공\n","\n","- `torch.legacy`(./nn/.optim): Torch로부터 포팅해온 코드\n","\n","- `torch.onnx`: ONNX(Open Neural Network Exchange)\n","\n","  - 서로 다른 프레임워크 간의 모델을 공유할 때 사용"]},{"cell_type":"markdown","metadata":{"id":"gb5O_aSvtHvb"},"source":["## 텐서(Tensors)\n","- 넘파이(NumPy)의 ndarray와 유사\n","\n","- GPU를 사용한 연산 가속도 가능"]},{"cell_type":"code","metadata":{"id":"CmKIvnx0s8G6","executionInfo":{"status":"ok","timestamp":1671374715889,"user_tz":-540,"elapsed":362,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch "],"execution_count":150,"outputs":[]},{"cell_type":"code","metadata":{"id":"49IHV-qJE5FI","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1671374716778,"user_tz":-540,"elapsed":558,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"d4addf94-52af-4df3-bbec-ce2ae2cda4b6"},"source":["torch.__version__"],"execution_count":151,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1.13.0+cu116'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":151}]},{"cell_type":"markdown","metadata":{"id":"isUHVy-gtZeT"},"source":["### 초기화 되지 않은 행렬 "]},{"cell_type":"code","metadata":{"id":"3PqY3cZatU0D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716779,"user_tz":-540,"elapsed":72,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"e2619c7f-f798-48e8-fe7f-aefc9ec39cc3"},"source":["x = torch.empty(4,2)\n","print(x)"],"execution_count":152,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[4.1566e+07, 0.0000e+00],\n","        [4.4842e-44, 0.0000e+00],\n","        [       nan, 1.4153e-43],\n","        [4.4721e+21, 1.8497e+31]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"zPCIJ2pNteZv"},"source":["### 무작위로 초기화된 행렬"]},{"cell_type":"code","metadata":{"id":"h6oPj2Q9tdYx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716779,"user_tz":-540,"elapsed":67,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"874d390c-217a-4103-9d09-09994aa9fbf0"},"source":["x = torch.rand(4,2)\n","x = print(x)"],"execution_count":153,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.2448, 0.3554],\n","        [0.9994, 0.1580],\n","        [0.1224, 0.1608],\n","        [0.8213, 0.8575]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"A5aHphIHtiJk"},"source":["### dtype이 long, 0으로 채워진 텐서"]},{"cell_type":"code","metadata":{"id":"4zykN8aMthXk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716780,"user_tz":-540,"elapsed":66,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"25f14ba8-5102-41ce-b35a-561047febea0"},"source":["x = torch.zeros(4,2,dtype=torch.long)\n","print(x)"],"execution_count":154,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0, 0],\n","        [0, 0],\n","        [0, 0],\n","        [0, 0]])\n"]}]},{"cell_type":"code","metadata":{"id":"W4VL8C_ctu8b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716780,"user_tz":-540,"elapsed":61,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"b17ee2b9-f89f-4ac2-89c1-79988bdef727"},"source":["x = torch.tensor([3, 2.1, 4])\n","print(x)"],"execution_count":155,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([3.0000, 2.1000, 4.0000])\n"]}]},{"cell_type":"code","metadata":{"id":"4RmVBVtIt46M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716781,"user_tz":-540,"elapsed":59,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"6a62df68-1eac-4ae8-ed71-bd4f8c6b0db2"},"source":["x = x.new_ones(2, 4, dtype=torch.double)\n","print(x)"],"execution_count":156,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.]], dtype=torch.float64)\n"]}]},{"cell_type":"code","metadata":{"id":"xxskTUfGuPUe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716781,"user_tz":-540,"elapsed":56,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"4d44376c-0e14-4579-90fa-6969a69a4f28"},"source":["x = torch.randn_like(x, dtype=torch.float)\n","print(x)"],"execution_count":157,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.5844, -1.0703, -0.5783,  0.2043],\n","        [-0.3676, -1.3472,  0.7852,  0.1595]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"7j5sGxGvucpH"},"source":["### 텐서의 크기"]},{"cell_type":"code","metadata":{"id":"yy-JbqKEuYIR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716782,"user_tz":-540,"elapsed":54,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"5d663b74-0c6b-4940-e51c-74b4b89346c3"},"source":["print(x.size())"],"execution_count":158,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([2, 4])\n"]}]},{"cell_type":"markdown","metadata":{"id":"ehOg0eDwufru"},"source":["## 텐서의 연산(operations)"]},{"cell_type":"markdown","metadata":{"id":"j8Doc_37uh3G"},"source":["### 덧셈 1"]},{"cell_type":"code","metadata":{"id":"Rw4JCYkYuef9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716783,"user_tz":-540,"elapsed":53,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"d6177b5a-9619-4324-f1e1-5620cb2c3880"},"source":["print(x)"],"execution_count":159,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.5844, -1.0703, -0.5783,  0.2043],\n","        [-0.3676, -1.3472,  0.7852,  0.1595]])\n"]}]},{"cell_type":"code","metadata":{"id":"Wa44ur1Nuj5U","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716784,"user_tz":-540,"elapsed":49,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"c714ec0b-4f06-4286-8e12-69da5014e218"},"source":["y = torch.rand(2,4)\n","print(y)\n"],"execution_count":160,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.2627, 0.3892, 0.9185, 0.7076],\n","        [0.6073, 0.6522, 0.7517, 0.8021]])\n"]}]},{"cell_type":"code","source":["print(x+y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oG88kAjUlEqs","executionInfo":{"status":"ok","timestamp":1671374716785,"user_tz":-540,"elapsed":46,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"9c229593-a6ee-48fe-e5aa-70b91c10d640"},"execution_count":161,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.3217, -0.6811,  0.3402,  0.9120],\n","        [ 0.2396, -0.6950,  1.5369,  0.9616]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"E5gcOo-Ouo9B"},"source":["### 덧셈2"]},{"cell_type":"code","metadata":{"id":"Qx-NzJhhumZx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716786,"user_tz":-540,"elapsed":44,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"026be6ff-c2ae-4610-931b-922da489d98d"},"source":["print(torch.add(x,y))"],"execution_count":162,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.3217, -0.6811,  0.3402,  0.9120],\n","        [ 0.2396, -0.6950,  1.5369,  0.9616]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"RlvrQhLuuuIr"},"source":["### 덧셈3\n","- 결과 텐서를 인자로 제공"]},{"cell_type":"code","metadata":{"id":"lUsLAOTcur1-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716787,"user_tz":-540,"elapsed":42,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"2fe334ed-9af9-418c-98f9-a54a8b914d0a"},"source":["result = torch.empty(2,4)\n","torch.add(x,y, out=result)\n","\n","print(result)"],"execution_count":163,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.3217, -0.6811,  0.3402,  0.9120],\n","        [ 0.2396, -0.6950,  1.5369,  0.9616]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"V6BdyZFSu2Ei"},"source":["### 덧셈4\n","- `in-place` 방식\n","\n","- (참고) in-place 방식\n","  - in-place방식으로 텐서의 값을 변경하는 연산 뒤에는 _''가 붙음\n","  - `x.copy_(y), x.t_()`"]},{"cell_type":"code","metadata":{"id":"lu8rR4WVu0wQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716788,"user_tz":-540,"elapsed":41,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"c852ee8b-7144-4ce5-9c94-e378d662a5d5"},"source":["print(x)\n","print(y)\n","y.add(x)\n","print(y)"],"execution_count":164,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.5844, -1.0703, -0.5783,  0.2043],\n","        [-0.3676, -1.3472,  0.7852,  0.1595]])\n","tensor([[0.2627, 0.3892, 0.9185, 0.7076],\n","        [0.6073, 0.6522, 0.7517, 0.8021]])\n","tensor([[0.2627, 0.3892, 0.9185, 0.7076],\n","        [0.6073, 0.6522, 0.7517, 0.8021]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"Uo8nsrGjOw6W"},"source":["### 그 외의 연산\n","- `torch.sub` : 뺄셈\n","\n","- `torch.mul` : 곱셉\n","\n","- `torch.div` : 나눗셈\n","\n","- `torch.mm` : 내적(dot product)"]},{"cell_type":"code","metadata":{"id":"S51kxzPTO1ER","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716788,"user_tz":-540,"elapsed":35,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"b4b3da75-758f-485d-ee89-5ddd8e8f260a"},"source":["x = torch.Tensor([[1,3], [5,7]])\n","y = torch.Tensor([[2,5,], [9,4]])\n","\n","print(x-y)\n","print(torch.sub(x,y))\n","print(x.sub(y))"],"execution_count":165,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-1., -2.],\n","        [-4.,  3.]])\n","tensor([[-1., -2.],\n","        [-4.,  3.]])\n","tensor([[-1., -2.],\n","        [-4.,  3.]])\n"]}]},{"cell_type":"code","metadata":{"id":"ou0dY8mkPR24","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716789,"user_tz":-540,"elapsed":33,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"bc403cd9-4eea-4fca-d1b3-2a4e1426be98"},"source":["x = torch.Tensor([[1,3], [5,7]])\n","y = torch.Tensor([[2,5,], [9,4]])\n","\n","print(x*y)\n","print(torch.mul(x,y))\n","print(x.mul(y))"],"execution_count":166,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[ 2., 15.],\n","        [45., 28.]])\n","tensor([[ 2., 15.],\n","        [45., 28.]])\n","tensor([[ 2., 15.],\n","        [45., 28.]])\n"]}]},{"cell_type":"code","metadata":{"id":"6RlZZBp3PbE4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716789,"user_tz":-540,"elapsed":30,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"0f988e93-41cf-4e7c-89df-ec8351167918"},"source":["x = torch.Tensor([[1,3], [5,7]])\n","y = torch.Tensor([[2,5,], [9,4]])\n","\n","print(x, y)\n","print(torch.div(x,y))\n","print(x.div(y))"],"execution_count":167,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 3.],\n","        [5., 7.]]) tensor([[2., 5.],\n","        [9., 4.]])\n","tensor([[0.5000, 0.6000],\n","        [0.5556, 1.7500]])\n","tensor([[0.5000, 0.6000],\n","        [0.5556, 1.7500]])\n"]}]},{"cell_type":"code","metadata":{"id":"7MR-ofE5P7VC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716789,"user_tz":-540,"elapsed":28,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"fd78e574-24ca-477f-9a78-f890a96f1641"},"source":["x = torch.Tensor([[1,3], [5,7]])\n","y = torch.Tensor([[2,5,], [9,4]])\n","\n","print(x.mm(y))"],"execution_count":168,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[29., 17.],\n","        [73., 53.]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"8URGwHE_NjDi"},"source":["## 텐서의 조작(manipulations)"]},{"cell_type":"markdown","metadata":{"id":"uCsdZIPTvG53"},"source":["### 인덱싱\n","- 넘파이처럼 인덱싱 사용가능"]},{"cell_type":"code","metadata":{"id":"jF2DE8kzvOs3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374716789,"user_tz":-540,"elapsed":25,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"fa9a3464-a358-4402-aa16-ea2ffad2af65"},"source":["print(x)"],"execution_count":169,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 3.],\n","        [5., 7.]])\n"]}]},{"cell_type":"code","metadata":{"id":"GQtBH3r3u7c3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717233,"user_tz":-540,"elapsed":464,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"8ce73ce9-80e0-4d0b-e1fd-48e49ec9682f"},"source":["print(x[:, 1])"],"execution_count":170,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([3., 7.])\n"]}]},{"cell_type":"markdown","metadata":{"id":"jEscXddKvQ5l"},"source":["### view\n","- 텐서의 크기(size)나 모양(shape)을 변경"]},{"cell_type":"code","metadata":{"id":"xwhWeqhLvKKj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717234,"user_tz":-540,"elapsed":165,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"2ba64876-4958-46e0-b6e8-46aca816097f"},"source":["x = torch.randn(4, 5)\n","y = x.view(20)\n","z = x.view(5, -1)\n","\n","print(x)\n","print(y)\n","print(z)\n","print('/////////////////////////////////////////////////////////')\n","print(x.size())\n","print(y.size())\n","print(z.size())"],"execution_count":171,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[ 1.1493, -0.3359,  1.0144,  0.4875,  0.3962],\n","        [ 0.6570,  0.8798,  3.0259, -1.4439,  0.5825],\n","        [ 0.0046, -0.0366, -0.6600,  1.3964, -0.4106],\n","        [-0.2836, -0.4234,  1.6975,  0.0626, -0.6611]])\n","tensor([ 1.1493, -0.3359,  1.0144,  0.4875,  0.3962,  0.6570,  0.8798,  3.0259,\n","        -1.4439,  0.5825,  0.0046, -0.0366, -0.6600,  1.3964, -0.4106, -0.2836,\n","        -0.4234,  1.6975,  0.0626, -0.6611])\n","tensor([[ 1.1493, -0.3359,  1.0144,  0.4875],\n","        [ 0.3962,  0.6570,  0.8798,  3.0259],\n","        [-1.4439,  0.5825,  0.0046, -0.0366],\n","        [-0.6600,  1.3964, -0.4106, -0.2836],\n","        [-0.4234,  1.6975,  0.0626, -0.6611]])\n","/////////////////////////////////////////////////////////\n","torch.Size([4, 5])\n","torch.Size([20])\n","torch.Size([5, 4])\n"]}]},{"cell_type":"markdown","metadata":{"id":"iBY_wuIRvf5j"},"source":["### item\n","- 텐서에 값이 단 하나라도 존재하면 숫자값을 얻을 수 있음\n"]},{"cell_type":"code","metadata":{"id":"E0W24QqpvcmV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717235,"user_tz":-540,"elapsed":162,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"43e99e7a-5586-4573-d952-1eb10de49fcd"},"source":["x = torch.randn(1)\n","print(x)\n","print(x.item())\n","print(x.dtype)"],"execution_count":172,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([-1.1768])\n","-1.1767972707748413\n","torch.float32\n"]}]},{"cell_type":"markdown","metadata":{"id":"V1sCUVwC3Nua"},"source":["- 스칼라값 하나만 존재해야함"]},{"cell_type":"code","metadata":{"id":"jl4_FAgd3Lt9","executionInfo":{"status":"ok","timestamp":1671374717235,"user_tz":-540,"elapsed":159,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["# x = torch.rand(2)\n","# print(x)\n","# print(x.item())\n","# print(x.dtype)\n","\n","\n","#ValueError: only one element tensors can be converted to Python scalars"],"execution_count":173,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uThndsy5M6wM"},"source":["### squeeze \n","- 차원을 축소(제거)"]},{"cell_type":"code","metadata":{"id":"OF3rOavnRxgM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717235,"user_tz":-540,"elapsed":158,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"feb34ad1-8f19-4229-b31e-f3a686482025"},"source":["tensor = torch.rand(1, 3, 3)\n","tensor.shape"],"execution_count":174,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 3, 3])"]},"metadata":{},"execution_count":174}]},{"cell_type":"code","metadata":{"id":"Y2jq0jHJR5Jw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717236,"user_tz":-540,"elapsed":157,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"e2cc0c64-1e9f-4ac1-cd61-9b98ffee30fa"},"source":["t = tensor.squeeze()\n","\n","print(t)\n","print(t.shape)"],"execution_count":175,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.0951, 0.3087, 0.2638],\n","        [0.8893, 0.5815, 0.8127],\n","        [0.8487, 0.2250, 0.0167]])\n","torch.Size([3, 3])\n"]}]},{"cell_type":"markdown","metadata":{"id":"COv-dnTYNJ8Z"},"source":["### unsqueeze\n","- 차원을 증가(생성)"]},{"cell_type":"code","metadata":{"id":"PFxaHGY1NOBo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717236,"user_tz":-540,"elapsed":152,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"a89f1015-fdc9-4b55-88c4-a32a910a5716"},"source":["tensor = torch.rand(1, 3, 3)\n","tensor.shape"],"execution_count":176,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 3, 3])"]},"metadata":{},"execution_count":176}]},{"cell_type":"code","metadata":{"id":"b6sa4tJ7SA8G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717236,"user_tz":-540,"elapsed":148,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"51e8632d-efa8-4fbc-c4dc-f56f59a8fa1c"},"source":["t = tensor.unsqueeze(dim=0)\n","\n","print(t)\n","print(t.shape)"],"execution_count":177,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[[0.0509, 0.3129, 0.1409],\n","          [0.4649, 0.0496, 0.3107],\n","          [0.5378, 0.1304, 0.5161]]]])\n","torch.Size([1, 1, 3, 3])\n"]}]},{"cell_type":"markdown","metadata":{"id":"_C_oa9JANOa6"},"source":["### stack\n","- 텐서간 결합"]},{"cell_type":"code","metadata":{"id":"f3x_XaUYNOuc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717236,"user_tz":-540,"elapsed":142,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"7e839f62-bdf3-4a17-f7b4-8b11753b7316"},"source":["x = torch.FloatTensor([1,4])\n","y = torch.FloatTensor([2,5])\n","z = torch.FloatTensor([3,6])\n","\n","print(torch.stack([x, y, z]))"],"execution_count":178,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 4.],\n","        [2., 5.],\n","        [3., 6.]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"XmJscbfg35-c"},"source":["### cat\n","- 텐서를 결합하는 메소드(concatenate)\n","\n","- 넘파이의 `stack`과 유사하지만, 쌓을 dim이 존재해야함\n","  - 예를 들어, 해당 차원을 늘려준 후 결합\n"]},{"cell_type":"code","metadata":{"id":"Mv3zlaNm37P1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717236,"user_tz":-540,"elapsed":139,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"441f528b-310a-454b-ce4c-f026522ed972"},"source":["a = torch.randn(1,1,3,3)\n","b = torch.randn(1,1,3,3)\n","c = torch.cat((a,b), dim = 0)\n","\n","print(c)\n","print(c.size())"],"execution_count":179,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[[ 0.6347, -1.8305,  0.2093],\n","          [ 0.0022, -2.0796, -0.2916],\n","          [ 1.5532,  0.0537,  0.2453]]],\n","\n","\n","        [[[-1.2533,  0.0664, -0.3992],\n","          [-0.9526,  0.5648,  1.3307],\n","          [-1.8735, -0.9679, -0.4259]]]])\n","torch.Size([2, 1, 3, 3])\n"]}]},{"cell_type":"code","metadata":{"id":"69M5jY60S7Mi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717237,"user_tz":-540,"elapsed":134,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"871e65b0-c763-42a0-f688-5abfe9a8eab2"},"source":["a = torch.randn(1,3,3)\n","b = torch.randn(1,3,3)\n","c = torch.cat((a,b), dim = 2)\n","\n","print(c)\n","print(c.size())"],"execution_count":180,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[-3.4102e-01,  1.4970e+00,  7.6747e-01,  9.9029e-01,  1.3384e+00,\n","           5.5766e-05],\n","         [-1.0941e+00,  1.2012e+00, -1.4962e+00, -1.6426e+00,  1.2656e+00,\n","          -1.3647e+00],\n","         [ 3.2529e-01,  9.7445e-01, -1.1957e+00, -4.9873e-01, -3.5428e-01,\n","          -1.1214e+00]]])\n","torch.Size([1, 3, 6])\n"]}]},{"cell_type":"markdown","metadata":{"id":"7gGXnOAqQTmG"},"source":["### chuck\n","- 텐서를 여러 개로 나눌 때 사용\n","\n","- 몇 개의 텐서로 나눌 것이냐"]},{"cell_type":"code","metadata":{"id":"pNV80VzPQZgG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717237,"user_tz":-540,"elapsed":130,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"0bb75eae-e9cf-4c71-fb05-2824e23cc49a"},"source":["tensor = torch.rand(3,6)\n","t1, t2, t3 = torch.chunk(tensor, 3, dim=1)\n","\n","print(tensor)\n","print(t1)\n","print(t2)\n","print(t3)"],"execution_count":181,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.6635, 0.2035, 0.5858, 0.3631, 0.3292, 0.8869],\n","        [0.7626, 0.4449, 0.8068, 0.9407, 0.8502, 0.0991],\n","        [0.7464, 0.0435, 0.2915, 0.5084, 0.5356, 0.1737]])\n","tensor([[0.6635, 0.2035],\n","        [0.7626, 0.4449],\n","        [0.7464, 0.0435]])\n","tensor([[0.5858, 0.3631],\n","        [0.8068, 0.9407],\n","        [0.2915, 0.5084]])\n","tensor([[0.3292, 0.8869],\n","        [0.8502, 0.0991],\n","        [0.5356, 0.1737]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"7U0Qb0jWQgm-"},"source":["### split\n","- `chunck`와 동일한 기능이지만 조금 다름\n","\n","- 하나의 텐서당 크기가 얼마이냐"]},{"cell_type":"code","metadata":{"id":"1V6DDnLVQqxz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717237,"user_tz":-540,"elapsed":126,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"3074485c-26f5-4152-84d9-892e6a1addb7"},"source":["tensor = torch.rand(3, 6)\n","t1, t2 = torch.split(tensor, 3, dim=1)\n","\n","print(tensor)\n","print(t1)\n","print(t2)\n"],"execution_count":182,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.7769, 0.1938, 0.8144, 0.9736, 0.7465, 0.9903],\n","        [0.5118, 0.8118, 0.8572, 0.3870, 0.8081, 0.3725],\n","        [0.8417, 0.7025, 0.5701, 0.4219, 0.3066, 0.9395]])\n","tensor([[0.7769, 0.1938, 0.8144],\n","        [0.5118, 0.8118, 0.8572],\n","        [0.8417, 0.7025, 0.5701]])\n","tensor([[0.9736, 0.7465, 0.9903],\n","        [0.3870, 0.8081, 0.3725],\n","        [0.4219, 0.3066, 0.9395]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"estSwhCgvta6"},"source":["### torch ↔ numpy\n","- Torch Tensor(텐서)를 Numpy array(배열)로 변환 가능\n","\n","  - `numpy()`\n","  - `from_numpy()`\n","\n","- (참고)\n","  - Tensor가 CPU상에 있다면 Numpy 배열은 메모리 공간을 공유하므로 하나가 변하면, 다른 하나도 변함"]},{"cell_type":"code","metadata":{"id":"VxHI7c_yvmAT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717237,"user_tz":-540,"elapsed":123,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"e4db453a-ec02-4d16-fbae-5e0abd165be4"},"source":["a = torch.ones(7)\n","print(a)"],"execution_count":183,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1., 1., 1., 1., 1., 1., 1.])\n"]}]},{"cell_type":"code","metadata":{"id":"whbrhokHwJ3A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717237,"user_tz":-540,"elapsed":115,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"a7b0a001-6e10-4ae2-fdfd-ec123ee65171"},"source":["b = a.numpy()\n","print(b)"],"execution_count":184,"outputs":[{"output_type":"stream","name":"stdout","text":["[1. 1. 1. 1. 1. 1. 1.]\n"]}]},{"cell_type":"code","metadata":{"id":"5StIhUWDwQjA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717237,"user_tz":-540,"elapsed":112,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"37f65b06-549e-448a-b9fc-410cd502ddc5"},"source":["import numpy as np\n","\n","a = np.ones(7)\n","b = torch.from_numpy(a)\n","np.add(a, 1, out=a)\n","print(a)\n","print(b)"],"execution_count":185,"outputs":[{"output_type":"stream","name":"stdout","text":["[2. 2. 2. 2. 2. 2. 2.]\n","tensor([2., 2., 2., 2., 2., 2., 2.], dtype=torch.float64)\n"]}]},{"cell_type":"code","metadata":{"id":"3RNS5-cRwTt8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717237,"user_tz":-540,"elapsed":109,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"836f0be1-4ece-4c58-a315-8871335e776f"},"source":["b.add_(1)"],"execution_count":186,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([3., 3., 3., 3., 3., 3., 3.], dtype=torch.float64)"]},"metadata":{},"execution_count":186}]},{"cell_type":"markdown","metadata":{"id":"v-ZaxSvLxEej"},"source":["## CUDA Tensors\n","- `.to` 메소드를 사용하여 텐서를 어떠한 장치로도 옮길 수 있음\n","  - 예) cpu, gpu"]},{"cell_type":"code","metadata":{"id":"xkaQznCRxpUj","executionInfo":{"status":"ok","timestamp":1671374717238,"user_tz":-540,"elapsed":107,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch"],"execution_count":187,"outputs":[]},{"cell_type":"code","metadata":{"id":"SCnC0x2Rxpbk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717238,"user_tz":-540,"elapsed":105,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"a034f65b-5db4-4c5b-8df4-257ef4610a50"},"source":["x = torch.randn(1)\n","print(x)\n","print(x.item())\n","print(x.dtype)"],"execution_count":188,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([-0.4646])\n","-0.46459510922431946\n","torch.float32\n"]}]},{"cell_type":"code","metadata":{"id":"GcSsFLkDw-nI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717238,"user_tz":-540,"elapsed":99,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"5aabaff4-9433-4375-8ee7-7d2725307b86"},"source":["device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","y = torch.ones_like(x, device=device)\n","x = x.to(device)\n","z = x + y\n","print(device)\n","print(z)\n","print(z.to('cpu', torch.double))"],"execution_count":189,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n","tensor([0.5354], device='cuda:0')\n","tensor([0.5354], dtype=torch.float64)\n"]}]},{"cell_type":"markdown","metadata":{"id":"NKqiGvLWx2nk"},"source":["## AUTOGRAD (자동미분)\n","- autograd 패키지는 Tensor의 모든 연산에 대해 **자동 미분** 제공\n","\n","- 이는 코드를 어떻게 작성하여 실행하느냐에 따라 역전파가 정의된다는 뜻\n","\n","- backprop를 위한 미분값을 자동으로 계산"]},{"cell_type":"markdown","metadata":{"id":"0zH41l-MyMHi"},"source":["### Tensor\n","\n","- data: tensor형태의 데이터\n","\n","- grad: data가 겨쳐온 layer에 대한 미분값 저장\n","\n","- grad_fn: 미분값을 계산한 함수에 대한 정보 저장 (어떤 함수에 대해서 backprop 했는지)\n","\n","- `requires_grad` 속성을 `True`로 설정하면, 해당 텐서에서 이루어지는 모든 연산들을 추적하기 시작\n","\n","- 계산이 완료된 후, `.backward()`를 호출하면 자동으로 `gradient`를 계산할 수 있으며, `.grad` 속성에 누적됨\n","\n","- 기록을 추적하는 것을 중단하게 하려면, `.detach()`를 호출하여 연산기록으로부터 분리\n","\n","- 기록을 추적하는 것을 방지하기 위해 코드 블럭을 `with torch.no_grad():`로 감싸면 `gradient`는 필요없지만, `requires_grad=True`로 설정되어 학습 가능한 매개변수를 갖는 모델을 평가(evaluate)할 때 유용\n","\n","- Autograd 구현에서 매우 중요한 클래스 : `Function` 클래스"]},{"cell_type":"code","metadata":{"id":"ipdk_1jfx47I","executionInfo":{"status":"ok","timestamp":1671374717238,"user_tz":-540,"elapsed":93,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch"],"execution_count":190,"outputs":[]},{"cell_type":"code","metadata":{"id":"ljNU-r9p0Rpo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717238,"user_tz":-540,"elapsed":93,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"d42166ae-2c2c-4805-c68c-971678b6af4b"},"source":["x = torch.ones(3,3, requires_grad = True)\n","print(x)"],"execution_count":191,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.]], requires_grad=True)\n"]}]},{"cell_type":"code","metadata":{"id":"or6sQ4EB0UYz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717238,"user_tz":-540,"elapsed":87,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"327e5c39-0806-4481-cf06-91a6ced44005"},"source":["y = x +5\n","print(y)"],"execution_count":192,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[6., 6., 6.],\n","        [6., 6., 6.],\n","        [6., 6., 6.]], grad_fn=<AddBackward0>)\n"]}]},{"cell_type":"code","metadata":{"id":"PuQ7xDmu0Wpj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717239,"user_tz":-540,"elapsed":84,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"6ccad15e-369d-4dc5-c47b-8a52a0efbdd7"},"source":["print(y.grad_fn)"],"execution_count":193,"outputs":[{"output_type":"stream","name":"stdout","text":["<AddBackward0 object at 0x7fcaca6850d0>\n"]}]},{"cell_type":"code","metadata":{"id":"6_2iM-Zq0ZdG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717239,"user_tz":-540,"elapsed":80,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"95380468-620a-4448-e3e8-ad83182f25a3"},"source":["z = y*y*2\n","out = z.mean()\n","\n","print(z, out)"],"execution_count":194,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[72., 72., 72.],\n","        [72., 72., 72.],\n","        [72., 72., 72.]], grad_fn=<MulBackward0>) tensor(72., grad_fn=<MeanBackward0>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"2aZ8SWn_0nqt"},"source":["- `requires_grad_(...)`는 기존 텐서의 `requires_grad`값을 바꿔치기(`in-place`)하여 변경"]},{"cell_type":"code","metadata":{"id":"mHGROgrM0ebO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717239,"user_tz":-540,"elapsed":77,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"dac016d4-6c28-4962-c549-8fac7ddba4ed"},"source":["a = torch.randn(3, 3)\n","a = ((a * 3) / (a -1))\n","print(a.requires_grad)\n","\n","a.requires_grad_(True)\n","print(a.requires_grad)\n","\n","b = (a * a).sum()\n","print(b.grad_fn)"],"execution_count":195,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","True\n","<SumBackward0 object at 0x7fcaca695fd0>\n"]}]},{"cell_type":"markdown","metadata":{"id":"KiEn_stZ1VgU"},"source":["### 기울기(Gradient)\n","- 역전파: `.backward()`를 통해 역전파 계산 가능"]},{"cell_type":"code","metadata":{"id":"1tdoN9p-1kn4","executionInfo":{"status":"ok","timestamp":1671374717239,"user_tz":-540,"elapsed":72,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["out.backward()"],"execution_count":196,"outputs":[]},{"cell_type":"code","metadata":{"id":"CixGTXbV1B9p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717240,"user_tz":-540,"elapsed":72,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"2d80911e-755f-42b0-87bc-ca16b9269bba"},"source":["print(x.grad)"],"execution_count":197,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[2.6667, 2.6667, 2.6667],\n","        [2.6667, 2.6667, 2.6667],\n","        [2.6667, 2.6667, 2.6667]])\n"]}]},{"cell_type":"code","metadata":{"id":"SY63Mcc-1iNI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717240,"user_tz":-540,"elapsed":67,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"aa96d571-4674-42ac-bef1-61611e95eb0b"},"source":["x = torch.randn(3, requires_grad=True)\n","\n","y = x * 2\n","while y.data.norm() < 1000:\n","  y = y * 2\n","\n","print(y)"],"execution_count":198,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([  263.0379, -1649.7338,   459.3374], grad_fn=<MulBackward0>)\n"]}]},{"cell_type":"code","metadata":{"id":"YPaVAbIT3gx_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717240,"user_tz":-540,"elapsed":63,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"967c6af4-78f8-4c1d-fdd3-d90737000ddc"},"source":["v = torch.tensor([0.1, 1.0, 0.0001], dtype = torch.float)\n","y.backward(v)\n","\n","print(x.grad)"],"execution_count":199,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1.0240e+02, 1.0240e+03, 1.0240e-01])\n"]}]},{"cell_type":"markdown","metadata":{"id":"0b9amArPXtcX"},"source":["- `with torch.no_grad()`를 사용하여 gradient의 업데이트를 하지 않음"]},{"cell_type":"code","metadata":{"id":"weeIe5_Z3jVe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717240,"user_tz":-540,"elapsed":60,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"012f92bb-299c-485f-e9ac-2cd4b755fe05"},"source":["print(x.requires_grad)\n","print((x ** 2).requires_grad)\n","\n","with torch.no_grad():\n","  print((x**2).requires_grad)"],"execution_count":200,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n","False\n"]}]},{"cell_type":"markdown","metadata":{"id":"bLcTLVRSmCdH"},"source":["- `detach()`: 내용물(content)은 같지만 require_grad가 다른 새로운 Tensor를 가져올 때"]},{"cell_type":"code","metadata":{"id":"ALcth7Ew3l7H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717241,"user_tz":-540,"elapsed":56,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"76a6a446-98ca-46b1-f45f-604807cf0816"},"source":["print(x.requires_grad)\n","y = x.detach()\n","print(y.requires_grad)\n","print(x.eq(y).all())"],"execution_count":201,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n","tensor(True)\n"]}]},{"cell_type":"markdown","metadata":{"id":"NSarysrqBh9D"},"source":["### 자동 미분 흐름 다시 보기(1)\n","- 계산 흐름  \n","  $a \\rightarrow b  \\rightarrow c  \\rightarrow out $\n","\n","<br>\n","\n","## $\\quad \\frac{\\partial out}{\\partial a} = ?$\n","- `backward()`를 통해  \n","  $a \\leftarrow b  \\leftarrow c  \\leftarrow out $을 계산하면  \n","    $\\frac{\\partial out}{\\partial a}$값이 `a.grad`에 채워짐\n"]},{"cell_type":"code","metadata":{"id":"NUAc1etP3oBc","executionInfo":{"status":"ok","timestamp":1671374717241,"user_tz":-540,"elapsed":52,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch"],"execution_count":202,"outputs":[]},{"cell_type":"code","metadata":{"id":"tCW7dq9uB89T","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717241,"user_tz":-540,"elapsed":52,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"08c3d290-be75-446d-9c5d-3e27d8c1dc70"},"source":["a = torch.ones(2,2)\n","print(a)"],"execution_count":203,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 1.],\n","        [1., 1.]])\n"]}]},{"cell_type":"code","metadata":{"id":"-AyyGy49FLz9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717241,"user_tz":-540,"elapsed":50,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"37412ffb-da75-46e0-e6b3-c98e3912bedb"},"source":["a = torch.ones(2,2, requires_grad=True)\n","print(a)"],"execution_count":204,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 1.],\n","        [1., 1.]], requires_grad=True)\n"]}]},{"cell_type":"code","metadata":{"id":"SmmJa-hvFPGH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717241,"user_tz":-540,"elapsed":45,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"48baea98-cd57-4536-ea08-06d991559a3b"},"source":["print(\"a.data\", a.data)\n","print(\"a.grad\", a.grad)\n","print(\"a.grad_fn\", a.grad_fn)"],"execution_count":205,"outputs":[{"output_type":"stream","name":"stdout","text":["a.data tensor([[1., 1.],\n","        [1., 1.]])\n","a.grad None\n","a.grad_fn None\n"]}]},{"cell_type":"markdown","metadata":{"id":"BCwhTsiHGCmG"},"source":["- $b = a + 2$"]},{"cell_type":"code","metadata":{"id":"iUPt042iF9V1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717242,"user_tz":-540,"elapsed":42,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"ef01622b-025d-4a3e-8d9b-a50a48885bdb"},"source":["b = a +2 \n","print(b)"],"execution_count":206,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[3., 3.],\n","        [3., 3.]], grad_fn=<AddBackward0>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"6cw2zoq9GHLF"},"source":["- $c = b^2$ "]},{"cell_type":"code","metadata":{"id":"FRDS6gP0GFZG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717242,"user_tz":-540,"elapsed":37,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"6f257e39-12f0-461a-e8fb-c06cce1da7e3"},"source":["c = b**2\n","print(c)"],"execution_count":207,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[9., 9.],\n","        [9., 9.]], grad_fn=<PowBackward0>)\n"]}]},{"cell_type":"code","metadata":{"id":"VynoiUywGSwh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717242,"user_tz":-540,"elapsed":33,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"ec56b3a5-a916-4c79-ab18-b8ae614b416b"},"source":["out = c.sum()\n","print(out)"],"execution_count":208,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(36., grad_fn=<SumBackward0>)\n"]}]},{"cell_type":"code","metadata":{"id":"v3ryJon9GeMn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717242,"user_tz":-540,"elapsed":30,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"a0c5b3e3-ade9-4e55-9ce8-a16b2da513b6"},"source":["print(out)\n","out.backward()"],"execution_count":209,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(36., grad_fn=<SumBackward0>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"f0aoNsPDHsoG"},"source":["- a의 `grad_fn`이 None인 이유  \n","  직접적으로 계산한 부분이 없었기 때문"]},{"cell_type":"code","metadata":{"id":"bccI4vIWGgqj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717242,"user_tz":-540,"elapsed":27,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"afccd39d-ffc3-42b1-a4f7-eb40f55f7b32"},"source":["print(\"a.data\", a.data)\n","print(\"a.grad\", a.grad)\n","print(\"a.grad_fn\", a.grad_fn)"],"execution_count":210,"outputs":[{"output_type":"stream","name":"stdout","text":["a.data tensor([[1., 1.],\n","        [1., 1.]])\n","a.grad tensor([[6., 6.],\n","        [6., 6.]])\n","a.grad_fn None\n"]}]},{"cell_type":"code","metadata":{"id":"oka1mkadHq-N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717242,"user_tz":-540,"elapsed":20,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"61cd0e23-2c57-431d-bce5-aacfa1f4a45c"},"source":["print(\"b.data\", b.data)\n","print(\"b.grad\", b.grad)\n","print(\"b.grad_fn\", b.grad_fn)"],"execution_count":211,"outputs":[{"output_type":"stream","name":"stdout","text":["b.data tensor([[3., 3.],\n","        [3., 3.]])\n","b.grad None\n","b.grad_fn <AddBackward0 object at 0x7fcaca62d190>\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-211-f4074a333c64>:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:480.)\n","  print(\"b.grad\", b.grad)\n"]}]},{"cell_type":"code","metadata":{"id":"ZiYNajdLccUF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717681,"user_tz":-540,"elapsed":455,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"c5d73230-bd3d-469b-8ebb-91fca2fc28e7"},"source":["print(\"c.data\", c.data)\n","print(\"c.grad\", c.grad)\n","print(\"c.grad_fn\", c.grad_fn)"],"execution_count":212,"outputs":[{"output_type":"stream","name":"stdout","text":["c.data tensor([[9., 9.],\n","        [9., 9.]])\n","c.grad None\n","c.grad_fn <PowBackward0 object at 0x7fcaca62d850>\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-212-a36590a32331>:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:480.)\n","  print(\"c.grad\", c.grad)\n"]}]},{"cell_type":"code","metadata":{"id":"BcLoMYite0vU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717682,"user_tz":-540,"elapsed":34,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"bdfc3b45-720e-43f0-bb92-1a79cc6cfbe3"},"source":["print(\"out.data\", out.data)\n","print(\"out.grad\", out.grad)\n","print(\"out.grad_fn\", out.grad_fn)"],"execution_count":213,"outputs":[{"output_type":"stream","name":"stdout","text":["out.data tensor(36.)\n","out.grad None\n","out.grad_fn <SumBackward0 object at 0x7fcaca62d070>\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-213-7c0d020029eb>:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:480.)\n","  print(\"out.grad\", out.grad)\n"]}]},{"cell_type":"markdown","metadata":{"id":"qZXgwviHfovj"},"source":["### 자동 미분 흐름 다시 보기(2)\n","- `grad`값을 넣어서 `backward`\n","\n","- 아래의 코드에서 `.grad`값이 None은 gradient값이 필요하지 않기 때문"]},{"cell_type":"code","metadata":{"id":"bB6DCYXRfcI_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717683,"user_tz":-540,"elapsed":29,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"349ee9de-941d-4c4f-896e-4d8b3f20e7c8"},"source":["x = torch.ones(3, requires_grad=True)\n","y = (x **2)\n","z = y ** 2 + x\n","out = z.sum()\n","print(out)"],"execution_count":214,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(6., grad_fn=<SumBackward0>)\n"]}]},{"cell_type":"code","metadata":{"id":"AVo-glm8fvFv","executionInfo":{"status":"ok","timestamp":1671374717683,"user_tz":-540,"elapsed":25,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["grad = torch.Tensor([0.1, 1, 100])\n","z.backward(grad)"],"execution_count":215,"outputs":[]},{"cell_type":"code","metadata":{"id":"tdBklrepf2qq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717684,"user_tz":-540,"elapsed":26,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"60776f8a-44ee-4ab8-8110-5d467a77fd70"},"source":["print(\"x.data\", x.data)\n","print(\"x.grad\", x.grad)\n","print(\"x.grad_fn\", x.grad_fn)"],"execution_count":216,"outputs":[{"output_type":"stream","name":"stdout","text":["x.data tensor([1., 1., 1.])\n","x.grad tensor([  0.5000,   5.0000, 500.0000])\n","x.grad_fn None\n"]}]},{"cell_type":"code","metadata":{"id":"HQvUGlfRf7jU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717684,"user_tz":-540,"elapsed":23,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"e2e389f1-f86a-44e1-9374-0683ee25ebc8"},"source":["print(\"y.data\", y.data)\n","print(\"y.grad\", y.grad)\n","print(\"y.grad_fn\", y.grad_fn)"],"execution_count":217,"outputs":[{"output_type":"stream","name":"stdout","text":["y.data tensor([1., 1., 1.])\n","y.grad None\n","y.grad_fn <PowBackward0 object at 0x7fcaca6347c0>\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-217-707c19ed96f2>:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:480.)\n","  print(\"y.grad\", y.grad)\n"]}]},{"cell_type":"code","metadata":{"id":"h7TFHdMfgxvW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717685,"user_tz":-540,"elapsed":21,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"31c46244-2e86-4479-f8fa-8dfe944f4cd2"},"source":["print(\"z.data\", z.data)\n","print(\"z.grad\", z.grad)\n","print(\"z.grad_fn\", z.grad_fn)"],"execution_count":218,"outputs":[{"output_type":"stream","name":"stdout","text":["z.data tensor([2., 2., 2.])\n","z.grad None\n","z.grad_fn <AddBackward0 object at 0x7fcaca626580>\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-218-5fdcb1013deb>:2: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at aten/src/ATen/core/TensorBody.h:480.)\n","  print(\"z.grad\", z.grad)\n"]}]},{"cell_type":"markdown","metadata":{"id":"DKv-osmNmWiA"},"source":["## nn & nn.functional\n","\n","- 두 패키지가 같은 기능이지만 방식이 조금 다름\n","\n","- 위의 `autograd` 관련 작업들을 두 패키지를 통해 진행할 수 있음\n","\n","- 텐서를 직접 다룰 때 `requires_grad`와 같은 방식으로 진행할 수 있음\n","\n","- 결론적으로, `torch.nn`은 attribute를 활용해 state를 저장하고 활용하고,  \n","  `torch.nn.functional`로 구현한 함수의 경우에는 인스턴스화 시킬 필요 없이 사용이 가능\n"," \n"]},{"cell_type":"markdown","metadata":{"id":"jk8fkKq3nWP1"},"source":["### nn 패키지\n","\n","- 주로 가중치(weights), 편향(bias)값들이 내부에서 자동으로 생성되는 레이어들을 사용할 때  \n","  - 따라서, `weight`값들을 직접 선언 안함\n","\n","- 예시\n","  - Containers\n","\n","  - Convolution Layers\n","\n","  - Pooling layers\n","\n","  - Padding Layers\n","\n","  - Non-linear Activations (weighted sum, nonlinearity)\n","\n","  - Non-linear Activations (other)\n","\n","  - Normalization Layers\n","\n","  - Recurrent Layers\n","\n","  - Transformer Layers\n","\n","  - Linear Layers\n","\n","  - Dropout Layers\n","\n","  - Sparse Layers\n","\n","  - Distance Functions\n","\n","  - Loss Functions\n","\n","  - ..\n","- https://pytorch.org/docs/stable/nn.html\n","\n"]},{"cell_type":"code","metadata":{"id":"8tEtWHAsmZMy","executionInfo":{"status":"ok","timestamp":1671374717685,"user_tz":-540,"elapsed":16,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch\n","import torch.nn as nn"],"execution_count":219,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NcjCbeEQqPSI"},"source":["- Convolution Layer 예시 (1)\n"]},{"cell_type":"code","metadata":{"id":"NQ7Y0tCOpkhM","executionInfo":{"status":"ok","timestamp":1671374717685,"user_tz":-540,"elapsed":16,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["m = nn.Conv2d(16, 33, 3, stride=2)\n","\n","m = nn.Conv2d(16, 33, (3,5), stride=(2, 1), padding=(4,2))\n","\n","m = nn.Conv2d(16, 33, (3,5), stride=(2, 1), padding=(4,2), dilation=(3,1))\n","\n","input = torch.randn(20, 16, 50, 100)\n","output = m(input)"],"execution_count":220,"outputs":[]},{"cell_type":"code","metadata":{"id":"RLqGbclbp3_N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717685,"user_tz":-540,"elapsed":16,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"bf9a375e-5083-4d13-e91f-ed4a4d2cff4b"},"source":["output.shape"],"execution_count":221,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([20, 33, 26, 100])"]},"metadata":{},"execution_count":221}]},{"cell_type":"markdown","metadata":{"id":"CYeGAJEuneqW"},"source":["### nn.functional 패키지\n","\n","- 가중치를 직접 선언하여 인자로 넣어줘야함\n","\n","- 예시)\n","  - Convolution functions\n","\n","  - Pooling functions\n","  \n","  - Non-linear activation functions\n","\n","  - Normalization functions\n","\n","  - Linear functions\n","\n","  - Dropout functions\n","  \n","  - Sparse functions\n","  \n","  - Distance functions\n","\n","  - Loss functions\n","  - ..\n","\n","- https://pytorch.org/docs/stable/nn.functional.html"]},{"cell_type":"code","metadata":{"id":"NpwbO9Dhpflm","executionInfo":{"status":"ok","timestamp":1671374717686,"user_tz":-540,"elapsed":14,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch\n","import torch.nn.functional as F"],"execution_count":222,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fUYaJ5aLqKed"},"source":["- Convolution Layer 예시 (2)"]},{"cell_type":"code","metadata":{"id":"GAWLQE2GouHP","executionInfo":{"status":"ok","timestamp":1671374717686,"user_tz":-540,"elapsed":13,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["filters = torch.randn(8, 4, 3, 3)\n"],"execution_count":223,"outputs":[]},{"cell_type":"code","metadata":{"id":"lWmSlFBrpms1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671374717686,"user_tz":-540,"elapsed":13,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"b2854f0e-ff83-4f8d-9302-15ff088dcaed"},"source":["input = torch.randn(1, 4, 5, 5)\n","conv = F.conv2d(input, filters, padding=1)\n","conv.shape"],"execution_count":224,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 8, 5, 5])"]},"metadata":{},"execution_count":224}]},{"cell_type":"markdown","metadata":{"id":"Wah4RsmgrRDP"},"source":["## Torchvision\n","\n","- `transforms`: 전처리할 때 사용하는 메소드\n","\n","- `transforms`에서 제공하는 클래스 이외에  \n","  일반적으로 클래스를 따로 만들어 전처리 단계를 진행\n","  \n","  - 아래의 코드에서 다양한 전처리 기술 확인  \n","    https://pytorch.org/docs/stable/torchvision/transforms.html\n"]},{"cell_type":"code","metadata":{"id":"akvq4QWmqSil","executionInfo":{"status":"ok","timestamp":1671374717686,"user_tz":-540,"elapsed":10,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms"],"execution_count":225,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PKu5mzyTs-Qj"},"source":["- 예시)\n","  - `DataLoader`의 인자로 들어갈 `transform`을 미리 정의할 수 있음\n","\n","  - `Compose`를 통해 리스트 안에 순서대로 전처리 진행\n","\n","  - 대표적인 예로, `ToTensor`()를 하는 이유는  \n","   <u>torchvision이 PIL Image형태로만 입력을 받기 때문에</u> 데이터 처리를 위해서 Tensor형으로 변환해야함"]},{"cell_type":"code","metadata":{"id":"y6K7FH-Rs9my","executionInfo":{"status":"ok","timestamp":1671374717686,"user_tz":-540,"elapsed":9,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["transform = transforms.Compose([transforms.ToTensor(),\n","                                transforms.Normalize(mean=(0.5,), std=(0.5,))])"],"execution_count":226,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I4l1GvIlslKa"},"source":["## utils.data\n","\n","- `Dataset`에는 다양한 데이터셋이 존재  \n","  - MNIST, CIFAR10, ...\n","\n","- `DataLoader`, `Dataset`을 통해  \n","  `batch_size`, `train`여부, `transform`등을 인자로 넣어 데이터를 어떻게 load할 것인지 정해줄 수 있음"]},{"cell_type":"code","metadata":{"id":"1wsZKY7-s2Vv","executionInfo":{"status":"ok","timestamp":1671374717686,"user_tz":-540,"elapsed":9,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch\n","from torch.utils.data import Dataset, DataLoader\n","\n","import torchvision\n","import torchvision.transforms as transforms"],"execution_count":227,"outputs":[]},{"cell_type":"code","metadata":{"id":"lldpI2lquBu3","executionInfo":{"status":"ok","timestamp":1671374717687,"user_tz":-540,"elapsed":10,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["trainset = torchvision.datasets.MNIST(root='/content/', \n","                                     train=True,\n","                                     download=True,\n","                                     transform=transform)\n","\n","testset = torchvision.datasets.MNIST(root='/content/', \n","                                     train=False,\n","                                     download=True,\n","                                     transform=transform)"],"execution_count":228,"outputs":[]},{"cell_type":"code","metadata":{"id":"fKddZnT1uQmT","executionInfo":{"status":"ok","timestamp":1671374782349,"user_tz":-540,"elapsed":392,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["train_loader = DataLoader(trainset, batch_size=8, shuffle=True, num_workers=2)\n","test_loader = DataLoader(testset, batch_size = 8, shuffle=False, num_workers=2)"],"execution_count":231,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zrxymquLxeo8"},"source":["- `batch_size`만큼 데이터를 하나씩 가져옴"]},{"cell_type":"code","metadata":{"id":"hvgMIyF6uUuU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375219638,"user_tz":-540,"elapsed":367,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"e0a5ad95-ebe2-48a0-fa72-356502f1d9c1"},"source":["dataiter = iter(train_loader)\n","images, labels = next(dataiter)\n","images.shape, labels.shape"],"execution_count":236,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([8, 1, 28, 28]), torch.Size([8]))"]},"metadata":{},"execution_count":236}]},{"cell_type":"markdown","metadata":{"id":"YPUC0a0aw6OM"},"source":["<u>**(중요) torch에서는 channel(채널)이 앞에 옴**</u>\n","\n","- `channel first`\n","\n","- tensorflow, keras 등에서는 channel이 뒤에 옴(`channel last`)"]},{"cell_type":"markdown","metadata":{"id":"wuhylD3iyFYr"},"source":["### 데이터 확인"]},{"cell_type":"code","metadata":{"id":"C9hAQmQlul8P","executionInfo":{"status":"ok","timestamp":1671375306906,"user_tz":-540,"elapsed":409,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import matplotlib.pyplot as plt\n","plt.style.use('seaborn-white')"],"execution_count":238,"outputs":[]},{"cell_type":"code","metadata":{"id":"zDcUY6o4xUQp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375337837,"user_tz":-540,"elapsed":321,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"48ae18f9-6b45-429f-b548-50a47ac0ca2c"},"source":["torch_image = torch.squeeze(images[0])\n","torch_image.shape"],"execution_count":240,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([28, 28])"]},"metadata":{},"execution_count":240}]},{"cell_type":"code","metadata":{"id":"MZmPWiGbxoiW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375363392,"user_tz":-540,"elapsed":5,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"4e33ce23-28ef-4cec-862a-49f164cc1c0a"},"source":["image = torch_image.numpy()\n","image.shape"],"execution_count":241,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(28, 28)"]},"metadata":{},"execution_count":241}]},{"cell_type":"code","metadata":{"id":"AUOdd4UaxaXO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375384229,"user_tz":-540,"elapsed":278,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"b01b2f87-06de-4471-a641-80004c2983d2"},"source":["label = labels[0].numpy()\n","label.shape"],"execution_count":243,"outputs":[{"output_type":"execute_result","data":{"text/plain":["()"]},"metadata":{},"execution_count":243}]},{"cell_type":"code","metadata":{"id":"PDQfjw4wxr1z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375389164,"user_tz":-540,"elapsed":4,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"baa32581-8f90-4fbb-a0e3-825783dd942f"},"source":["label"],"execution_count":244,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(9)"]},"metadata":{},"execution_count":244}]},{"cell_type":"code","metadata":{"id":"JDCVw59ax3-A","colab":{"base_uri":"https://localhost:8080/","height":277},"executionInfo":{"status":"ok","timestamp":1671375408707,"user_tz":-540,"elapsed":454,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"380e24be-1777-481d-d9c0-0056284b0a66"},"source":["plt.title(label)\n","plt.imshow(image,'gray')\n","plt.show()"],"execution_count":245,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"JVcWQlxzihtS"},"source":["## 각 Layer 설명"]},{"cell_type":"code","metadata":{"id":"IGXn1_weif5H","executionInfo":{"status":"ok","timestamp":1671375477367,"user_tz":-540,"elapsed":267,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim"],"execution_count":247,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"73kJ3heBi26y"},"source":["### nn.Conv2d\n","\n","- `in_channels`: channel의 갯수\n","\n","- `out_channels`: 출력 채널의 갯수\n","\n","- `kernel_size`: 커널(필터) 사이즈\n","\n","- 텐서플로우, 케라스와 다르게 레이어의 `input`인자에도 값을 집어 넣어줘야함"]},{"cell_type":"code","metadata":{"id":"RcHJguyFipTl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375540824,"user_tz":-540,"elapsed":309,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"f2290924-51b3-4c26-8f26-665bf9d47f20"},"source":["nn.Conv2d(in_channels=1, out_channels = 20, kernel_size= 5, stride=1)\n"],"execution_count":250,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Conv2d(1, 20, kernel_size=(5, 5), stride=(1, 1))"]},"metadata":{},"execution_count":250}]},{"cell_type":"code","metadata":{"id":"iWiJbViHjFG0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375568907,"user_tz":-540,"elapsed":363,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"a3590a34-f0a4-4271-bf4b-0e30505bb35f"},"source":["layer = nn.Conv2d(1, 20, 5, 1).to(torch.device('cpu'))\n","layer"],"execution_count":251,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Conv2d(1, 20, kernel_size=(5, 5), stride=(1, 1))"]},"metadata":{},"execution_count":251}]},{"cell_type":"markdown","metadata":{"id":"GxWYFm2xjUeN"},"source":["- `wegiht`확인"]},{"cell_type":"code","metadata":{"id":"za0enRbyjPzV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375584412,"user_tz":-540,"elapsed":293,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"7e8aa9b6-ab66-44f2-c5ca-169292479811"},"source":["weight = layer.weight\n","weight.shape"],"execution_count":252,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([20, 1, 5, 5])"]},"metadata":{},"execution_count":252}]},{"cell_type":"markdown","metadata":{"id":"MAZcTU2gjiCX"},"source":["- `weight`는 `detach()`를 통해 꺼내줘야 `numpy()`변환이 가능"]},{"cell_type":"code","metadata":{"id":"9eN_oUBkjT85","executionInfo":{"status":"ok","timestamp":1671375598754,"user_tz":-540,"elapsed":299,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["weight = weight.detach()"],"execution_count":253,"outputs":[]},{"cell_type":"code","metadata":{"id":"kwso9tsijmz8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375610025,"user_tz":-540,"elapsed":280,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"0367dd77-6749-4fb4-c985-86e574b0216e"},"source":["weight = weight.numpy()\n","weight.shape"],"execution_count":254,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(20, 1, 5, 5)"]},"metadata":{},"execution_count":254}]},{"cell_type":"code","metadata":{"id":"mUegf6HPjdPl","colab":{"base_uri":"https://localhost:8080/","height":262},"executionInfo":{"status":"ok","timestamp":1671375646395,"user_tz":-540,"elapsed":336,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"7567ef9b-893a-45d4-a857-1d1629a83386"},"source":["plt.imshow(weight[0,0,:,:], 'jet')\n","plt.colorbar()\n","plt.show()"],"execution_count":255,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"DMeTOqVmcdWa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375670617,"user_tz":-540,"elapsed":408,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"3cbdde26-769e-4f4f-e95b-29d9a71043d1"},"source":["print(images.shape)"],"execution_count":256,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([8, 1, 28, 28])\n"]}]},{"cell_type":"code","metadata":{"id":"cvolnNsscdHs","executionInfo":{"status":"ok","timestamp":1671375724604,"user_tz":-540,"elapsed":288,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["input_image = torch.unsqueeze(images[0], dim=0)"],"execution_count":261,"outputs":[]},{"cell_type":"code","metadata":{"id":"NLOAfD5mjup1","executionInfo":{"status":"ok","timestamp":1671375735675,"user_tz":-540,"elapsed":276,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["output_data = layer(input_image)"],"execution_count":262,"outputs":[]},{"cell_type":"code","metadata":{"id":"r50wFkl6j1sY","executionInfo":{"status":"ok","timestamp":1671375888966,"user_tz":-540,"elapsed":300,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["output = output_data.data"],"execution_count":263,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZiIp-frJj2Hl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671375905689,"user_tz":-540,"elapsed":360,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"704abdce-4279-46d7-ab90-35c6bdbac50d"},"source":["output_arr = output.numpy()\n","output_arr.shape"],"execution_count":264,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 20, 24, 24)"]},"metadata":{},"execution_count":264}]},{"cell_type":"code","metadata":{"id":"uOHMu-UQkW3a","colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"status":"ok","timestamp":1671376056594,"user_tz":-540,"elapsed":787,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"f4ea3355-0133-4c76-aadc-05ad00d43d1b"},"source":["plt.figure(figsize=(15, 30))\n","\n","plt.subplot(131)\n","plt.title('input')\n","plt.imshow(image, 'gray')\n","plt.subplot(132)\n","plt.title('Weight')\n","plt.imshow(weight[0,0,:,:], 'jet')\n","plt.subplot(133)\n","plt.title('Output')\n","plt.imshow(output_arr[0,0,:,:], 'gray')\n","plt.show()"],"execution_count":266,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x2160 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"6sCqGmH_kwHm"},"source":["### Pooling\n","- `F.max_pool2d` \n","  - `stride`\n","\n","  - `kernel_size`\n","\n","- `torch.nn.MaxPool2d` 도 많이 사용"]},{"cell_type":"code","metadata":{"id":"AYqPrLH1kxQl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376111715,"user_tz":-540,"elapsed":279,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"20ce58ab-cdf9-427b-e592-df3e61239292"},"source":["image.shape"],"execution_count":267,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(28, 28)"]},"metadata":{},"execution_count":267}]},{"cell_type":"code","metadata":{"id":"tvI8W_8Yk81S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376129521,"user_tz":-540,"elapsed":276,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"01b1710f-99ba-4f25-a535-6d9eb93ca178"},"source":["pool = F.max_pool2d(output, 2, 2)\n","pool.shape"],"execution_count":268,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 20, 12, 12])"]},"metadata":{},"execution_count":268}]},{"cell_type":"markdown","metadata":{"id":"aV3HK4FulCaJ"},"source":["- MaxPool Layer는 weight가 없기 때문에 바로 `numpy()`변환 가능"]},{"cell_type":"code","metadata":{"id":"fseB_qlflBta","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376145154,"user_tz":-540,"elapsed":263,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"c22dcc00-3ce6-48e4-fafc-957a6b8ec8d1"},"source":["pool_arr = pool.numpy()\n","pool_arr.shape"],"execution_count":269,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 20, 12, 12)"]},"metadata":{},"execution_count":269}]},{"cell_type":"code","metadata":{"id":"6w8DQnNtlNCq","colab":{"base_uri":"https://localhost:8080/","height":313},"executionInfo":{"status":"ok","timestamp":1671376220890,"user_tz":-540,"elapsed":883,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"b1aa4ffa-6aa6-41dd-b3bb-1c0ed21ab3f6"},"source":["plt.figure(figsize=(10,15))\n","plt.subplot(121)\n","plt.title(\"Input\")\n","plt.imshow(image, 'gray')\n","plt.subplot(122)\n","plt.title(\"Output\")\n","plt.imshow(pool_arr[0,0,:,:], 'gray')\n","plt.show()\n"],"execution_count":270,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x1080 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAksAAAEoCAYAAABINbVrAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAfsklEQVR4nO3da1RWdfr/8Q9yh4ggKooNTSq11JrMrJUVpiZInsohrRmQUWtWDzTL8Vg5jJmz/C0VtKbUVp7pwOTQoKWVI4yZk+Mola6xwZlStAzREBXxACin/4OW/DPhuxH3zd43vF+PZHNxcbm92Xzch+/tV11dXS0AAADUqoXTAwAAALgZYQkAAMCAsAQAAGBAWAIAADAgLAEAABgQlgAAAAwIS7AUExOjL774wva+e/fu1VdffWV7XwDNV3V1td58802NGDFCQ4cO1ZAhQzR79mydOnXK8mvffffda/rehw4d0ueff35NPeBOhCU4Zt26dfr666+dHgNAE/KnP/1JH3zwgVauXKnNmzfro48+UkhIiMaOHauysrI6v66wsFCrVq26pu+9ZcsWwlITRVhCvY0dO1apqakaPXq0+vfvr2nTpqm6ulpHjhzRXXfdpVWrVunhhx9Wv379tGXLFknSkiVL9Ic//KGmx6WP165dqw0bNmjhwoVKTU116q8EoAk5ffq03nzzTS1cuFDXX3+9JMnj8ejZZ59Vy5YttWHDBvXo0UPff/99zddc+jghIUFHjx7V0KFDdfHiRfXo0UNvvfWW4uLiFBUVpbVr10qS1q9fryeeeKLm6y99vHXrVi1fvlxvvfWWFixY0Kh/b3ifx+kB4Fu2bt2q1NRUVVVVKTY2Vnv27FGnTp10/vx5+fn56cMPP9S//vUvTZs2TQMHDqyzz+jRo7Vp0yY99thjiouLa7y/AIAma+/evfrZz36myMjIKz4XExOjzz77rM6vnTdvnmbNmqXNmzfXbDt8+LA2bNigQ4cOKS4uTkOHDq3z62NiYvTggw+qc+fOmjhx4rX9ReA6nFnCVRk6dKgCAwMVFBSkrl276tixYzWfe+yxxyRJffv2VUVFhQ4fPuzUmACaodOnT6t9+/a1fi4sLEzFxcVX1e/RRx+VJN10002KjIzUl19+ec0zwjcRlnBVgoODa/7s7++vyspKSZKfn59CQ0NrPtemTZurPjABwLVo166djh8/XuvnTp48qbCwsKvq9+NjWmhoqM6cOXNN88F3EZZgi+rqahUVFdV8XFxcrNDQULVo0UJVVVWXbQcAb7jzzjtVXFxc61O2n3zyiaKiotSiRYua/+RZHY9+fEw7ffp0zTHt0tdLIkA1E4Ql2ObDDz+UJP3zn/9UYGCgIiMjFR4erv3796uqqkqnTp3Sp59+WlPv8Xh09uxZp8YF0MSEhIRowoQJevbZZ5WXlydJqqio0EsvvaSqqioNHz5cHTt2rAlT69atU4sWP/wa9Hg8KikpUUVFRU2/jz76SJJ08OBBHT58WHfccYfCw8P1zTff6MKFCyotLb3sHieOaU0XN3jDFv7+/iovL9dDDz2k4uJi/d///Z9atGihoUOHauPGjYqNjdVNN92koUOH6uTJk5Kk2NhYLVy4UHl5efr973/v8N8AQFPw5JNPqmXLlnrqqadUUVGh6upq3XvvvUpNTVVAQICmTp2qOXPmaPHixUpISKi5taBHjx4KDQ3V/fffr/fee0+S1L59e8XFxamgoECzZs1SaGio7r33Xt1xxx0aMmSIfv7zn2vQoEHasWOHJCk6OlozZsxQfn6+Fi9e7Ng+gP38qqurq50eAr7tyJEjGjx4sP773/86PQoA2KJHjx76xz/+UbMEAZo3LsMBAAAYEJYAAAAMuAwHAABgwJklAAAAA688DVdWVqacnBx17NhR/v7+3vgWAFymsrJShYWF6tmzpwIDA50ep8E4fgHNj9XxyythKScnR7/5zW+80RqAy/35z3/W3Xff7fQYDcbxC2i+6jp+NTgszZs3T3v37pWfn5+SkpLUq1evms917NhRkvTdd99dtsAXgKbL4/Goc+fONT//vurS/DExMQoKCnJ4GgCNoaSkRFu3bq3z+NWgsPTZZ5/p8OHDSk9P18GDB5WUlKT09PSaz186dV1RUUFYApoZX790dWn+oKCgy94LEUDTV9fxq0E3eO/cuVOxsbGSpJtvvlnFxcU6d+5cw6cDAABwqQaFpRMnTqhdu3Y1H7dv316FhYW2DQUAAOAWtiwdwFJNAACgqWpQWAoPD9eJEydqPj5+/LjP39QJAABQmwaFpfvvv1+ZmZmSpH379ik8PJwbIQH4lHnz5ik+Pl4JCQn68ssvnR4HgIs16Gm4u+66S7fddpsSEhLk5+enF1980e65AMBrrJ7oBYAfa/A6SzNmzLBzDgBoNHU90csZcgC14b3hADQ7PNEL4GoQlgA0ezzRC8CEsASg2eGJXgBXg7AEoNnhiV4AV6PBN3gDgK/iiV4AV4OwBKBZ4oleAPXFZTgAAAADwhIAAIABYQkAAMCAsAQAAGDADd4AgBrXXXedz/QtKSmxvefnn39ue89Dhw7Z3jMmJsb2nqw1VjfOLAEAABgQlgAAAAwISwAAAAaEJQAAAAPCEgAAgAFhCQAAwICwBAAAYEBYAgAAMCAsAQAAGBCWAAAADAhLAAAABoQlAAAAA8ISAACAAWEJAADAgLAEAABgQFgCAAAwICwBAAAYEJYAAAAMCEsAAAAGhCUAAAADj9MDAAAa5rrrrrO9Z2hoqO09JSkvL8/2nm+88YbtPfv162d7z4SEBNt7dujQwfaeubm5tveUvPeaakycWQIAADAgLAEAABgQlgAAAAwISwAAAAYNusE7OztbkydPVrdu3SRJ3bt31wsvvGDrYAAAAG7Q4Kfh7rnnHi1evNjOWQAAAFyHy3AAAAAGDQ5Lubm5mjBhgkaPHq0dO3bYORMAeF1KSori4+P16KOPKisry+lxALhYgy7Dde3aVc8884yGDRumvLw8jRs3TllZWQoICLB7PgCw3a5du3TgwAGlp6erqKhII0eO1ODBg50eC4BLNSgsderUScOHD5ckde7cWR06dFBBQYFuvPFGW4cDAG/o06ePevXqJUlq06aNSktLVVlZKX9/f4cnA+BGDboMt3HjRq1evVqSVFhYqJMnT6pTp062DgYA3uLv76+goCBJUkZGhgYMGEBQAlCnBp1ZiomJ0YwZM/Txxx+rvLxcc+bM4RJcMzF9+nTLmp49e1rWxMTEWNZcvHjRsiYnJ8eypj7LWtSnD5qeLVu2KCMjQ2vWrHF6FAAu1qCwFBwcrGXLltk9CwA0mu3bt2vZsmVatWqVQkJCnB4HgIs1eJ0lAPBVZ8+eVUpKit544w21bdvW6XEAuBxhCUCzs2nTJhUVFWnKlCk125KTkxUREeHgVADcirAEoNmJj49XfHy802MA8BGs4A0AAGBAWAIAADAgLAEAABgQlgAAAAy4wbsJaNmypWXNpbenMXnppZcsa7p06WJZ4+fnZ1lTH/n5+ZY1DzzwgGVNdna2Zc1tt91mWfPtt99a1gCN6dIq5HYqKiqyvackDRkyxPaevXv3tr1nfRbDvVqZmZm294yMjLS958MPP2x7T+mHNc18HWeWAAAADAhLAAAABoQlAAAAA8ISAACAAWEJAADAgLAEAABgQFgCAAAwICwBAAAYEJYAAAAMWMG7CRg5cqRlzTvvvNMIk/zg66+/tqxJSUmxrElLS7OsGTRokGXNpk2bLGsSEhIsaxYsWGBZAwBoejizBAAAYEBYAgAAMCAsAQAAGBCWAAAADAhLAAAABoQlAAAAA8ISAACAAWEJAADAgEUpXe7uu++2rHnrrbcaYZIf3HfffZY1u3fvtqyJiYmxrPntb39rWbN27VrLmsGDB1vWnDhxwrIGANA8cWYJAADAgLAEAABgwGU4APBRHo/9h/D6XPpviFOnTtne89ChQ7b33LNnj+09u3btanvPv//977b3HDhwoO09mwrOLAEAABgQlgAAAAwISwAAAAaEJQAAAAPCEgAAgAFPw7lcXFycZU11dbVlzUcffWRZM336dMua3Nxcy5r6mDJlimXNsGHDLGvq85RJUlJSfUYCAKBW9TqztH//fsXGxiotLU2SdOzYMY0dO1aJiYmaPHmyLl686NUhAcBuZWVlio2N1fr1650eBYDLWYalkpISzZ07V1FRUTXbFi9erMTERL3zzjvq0qWLMjIyvDokANjt9ddfV2hoqNNjAPABlmEpICBAK1euVHh4eM227OxsDRo0SJIUHR2tnTt3em9CALDZwYMHlZubyyJ8AOrFMix5PB4FBgZetq20tFQBAQGSpLCwMBUWFnpnOgDwguTkZM2cOdPpMQD4iGt+Gq4+NxcDgFu8//776t27t2688UanRwHgIxr0NFxQUJDKysoUGBiogoKCyy7RAYCbbdu2TXl5edq2bZu+//57BQQE6Prrr1ffvn2dHg2ASzUoLPXt21eZmZmKi4tTVlaW+vfvb/dcAOAVr7zySs2flyxZohtuuIGgBMDIMizl5OQoOTlZ+fn58ng8yszM1KJFizRz5kylp6crIiJCjzzySGPMCgAA0Ogsw1LPnj319ttvX7E9NTXVKwM1J/Hx8ZY148ePt6z597//bVkzYsSIes1kh969e1vW1GfByfoICQmxpQ+ap0mTJjk9AgAfwNudAAAAGBCWAAAADAhLAAAABoQlAAAAA8ISAACAQYPWWQIAOO+GG26wvWe3bt1s7ylJ3bt3t71nv379bO958803294zKyvL9p6zZs2yvef//vc/23s2FZxZAgAAMCAsAQAAGHAZzkF9+vSxrOnQoYNlzdKlS+0Yp17qs+Dk5s2bG2ESAAAaB2eWAAAADAhLAAAABoQlAAAAA8ISAACAAWEJAADAgLAEAABgQFgCAAAwICwBAAAYsCilg0aMGGFLn61bt1rW1Oc9lOLj4y1rRo8ebVnTvn17yxq7bNy4sdG+FwCgeeLMEgAAgAFhCQAAwICwBAAAYEBYAgAAMCAsAQAAGBCWAAAADAhLAAAABoQlAAAAAxaldNDhw4cta7p162ZZ88EHH1jW+Pv7W9YEBwdb1jSms2fPWtZ88803jTAJ4E6tWrWyvWdFRYXtPSWpurra9p5ffPGF7T23bNlie899+/bZ3vPixYu290TdOLMEAABgQFgCAAAwICwBAAAYEJYAAAAMCEsAAAAGhCUAAAADwhIAAIABYQlAs7Rx40b98pe/1KhRo7Rt2zanxwHgYixK6aC1a9da1tx7772WNaGhoZY1lZWVljXffvutZc27775rWTN8+HDLmp49e1rW/PWvf7Wsyc3NtawBfqqoqEivvfaa1q1bp5KSEi1ZskQDBw50eiwALkVYAtDs7Ny5U1FRUQoODlZwcLDmzp3r9EgAXKxel+H279+v2NhYpaWlSZJmzpypESNGaOzYsRo7diynsAH4lCNHjqisrEwTJkxQYmKidu7c6fRIAFzM8sxSSUmJ5s6dq6ioqMu2T5s2TdHR0V4bDAC86fTp01q6dKmOHj2qcePG6ZNPPpGfn5/TYwFwIcszSwEBAVq5cqXCw8MbYx4A8LqwsDDdeeed8ng86ty5s1q3bq1Tp045PRYAl7IMSx6PR4GBgVdsT0tL07hx4zR16lQOMgB8Sr9+/bRr1y5VVVWpqKhIJSUlateundNjAXCpBt3gHRcXp7Zt2+rWW2/VihUrtHTpUs2ePdvu2QDAKzp16qQhQ4bo17/+tSRp1qxZatGClVQA1K5BYenH9y/FxMRozpw5ds0DAI0iISFBCQkJTo8BwAc06L9SkyZNUl5eniQpOztb3bp1s3UoAAAAt7A8s5STk6Pk5GTl5+fL4/EoMzNTY8aM0ZQpU9SqVSsFBQVp/vz5jTFrk5OammpZ8+mnn1rWPPXUU5Y1Fy5csKxZuHChZc3Zs2cta6qqqixr6rMo5cGDBy1rAADwNsuw1LNnT7399ttXbB8yZIhXBgIAAHAT7mgEAAAw4O1OAAA1jh496pW+1dXVtvcsKyuzvWd9bhG4Wjt27LC953fffWd7T9SNM0sAAAAGhCUAAAADwhIAAIABYQkAAMCAsAQAAGDA03AuV5+FGWfMmNEIk9TfsGHDbOnTv39/yxoWRAUAeBtnlgAAAAwISwAAAAaEJQAAAAPCEgAAgAFhCQAAwICwBAAAYEBYAgAAMCAsAQAAGLAoJVzr448/dnoEAAA4swQAAGBCWAIAADAgLAEAABgQlgAAAAwISwAAAAY8DQcAPmrPnj229+zRo4ftPSUpOzvb9p69evWyved3331ne08/Pz/be7Zq1cr2nuXl5bb3bCo4swQAAGBAWAIAADAgLAEAABgQlgAAAAwISwAAAAaEJQAAAAPCEgAAgAHrLAFods6fP6/nn39excXFKi8v19NPP63+/fs7PRYAlyIsAWh23nvvPUVGRmr69OkqKCjQ448/rs2bNzs9FgCX4jIcgGanXbt2On36tCTpzJkzateuncMTAXAzziwBaHYeeughrV+/Xg8++KDOnDmj5cuXOz0SABcjLOGqdO3a1ZYawEkbNmxQRESEVq9era+++kpJSUlav36902MBcCkuwwFodvbs2aN+/fpJkm655RYdP35clZWVDk8FwK3qdWYpJSVFu3fvVkVFhcaPH6/bb79dzz33nCorK9WxY0ctXLhQAQEB3p4VAGzRpUsX7d27V0OGDFF+fr5at24tf39/p8cC4FKWYWnXrl06cOCA0tPTVVRUpJEjRyoqKkqJiYkaNmyYXn75ZWVkZCgxMbEx5gWAaxYfH6+kpCSNGTNGFRUVmjNnjtMjAXAxy7DUp08f9erVS5LUpk0blZaWKjs7W3/84x8lSdHR0VqzZg1hCYDPaN26tV599VWnxwDgIyzvWfL391dQUJAkKSMjQwMGDFBpaWnNZbewsDAVFhZ6d0oAAACH1PsG7y1btigjI0OzZ8++bHt1dbXtQwEAALhFvcLS9u3btWzZMq1cuVIhISEKCgpSWVmZJKmgoEDh4eFeHRIAAMAplmHp7NmzSklJ0fLly9W2bVtJUt++fZWZmSlJysrK4j2VAABAk2V5g/emTZtUVFSkKVOm1GxbsGCBZs2apfT0dEVEROiRRx7x6pBwj0uB2SQ0NNSyxs/Pz7Jm9+7d9ZoJaK7Ky8tt75mTk2N7T0lq0cL+Zf08HvvXVb5w4YLtPetz3Lxa7du3t73nmTNnbO/ZVFi+0uLj4xUfH3/F9tTUVK8MBAAA4Cas4A0AAGBAWAIAADAgLAEAABgQlgAAAAwISwAAAAaEJQAAAAPCEgAAgAFhCQAAwMD+5U+BeqjPGzD/5z//aYRJAAAw48wSAACAAWEJAADAgLAEAABgQFgCAAAwICwBAAAYEJYAAAAMCEsAAAAGhCUAAAADFqXEVTl37pwtNcHBwXaMAwCA13FmCQAAwICwBAAAYMBlOACA11VVVdneMyIiwvaex48ft71nRUWF7T3Lysps74m6cWYJAADAgLAEAABgQFgCAAAwICwBAAAYEJYAAAAMeBoOVyU3N9ey5uDBg5Y1d9xxh2VNSEiIZc3JkyctawAAuBacWQLQpO3fv1+xsbFKS0uTJB07dkxjx45VYmKiJk+erIsXLzo8IQC3IywBaLJKSko0d+5cRUVF1WxbvHixEhMT9c4776hLly7KyMhwcEIAvoCwBKDJCggI0MqVKxUeHl6zLTs7W4MGDZIkRUdHa+fOnU6NB8BHcM8SgCbL4/HI47n8MFdaWqqAgABJUlhYmAoLC50YDYAP4cwSgGarurra6REA+ADCEoBmJSgoqOZ9tQoKCi67RAcAtSEsAWhW+vbtq8zMTElSVlaW+vfv7/BEANyOe5YANFk5OTlKTk5Wfn6+PB6PMjMztWjRIs2cOVPp6emKiIjQI4884vSYAFyOsATb/e1vf7Osqc+ilI8++qhlzUsvvVSvmdA89ezZU2+//fYV21NTUx2YBoCvqldYSklJ0e7du1VRUaHx48dr69at2rdvn9q2bStJevLJJzVw4EBvzgkAAOAIy7C0a9cuHThwQOnp6SoqKtLIkSN13333adq0aYqOjm6MGQEAABxjGZb69OmjXr16SZLatGmj0tJSVVZWen0wAAAAN7B8Gs7f319BQUGSpIyMDA0YMED+/v5KS0vTuHHjNHXqVJ06dcrrgwIAADih3jd4b9myRRkZGVqzZo1ycnLUtm1b3XrrrVqxYoWWLl2q2bNne3NOAAAAR9QrLG3fvl3Lli3TqlWrFBISctmbUsbExGjOnDnemg8A0AS0bNnS9p6XFhe10y9+8Qvbe3bv3t32nps3b7a9J+pmeRnu7NmzSklJ0fLly2uefps0aZLy8vIk/fCmlN26dfPulAAAAA6xPLO0adMmFRUVacqUKTXbRo0apSlTpqhVq1YKCgrS/PnzvTokAACAUyzDUnx8vOLj46/YPnLkSK8MBN+XlJRkSw0AAG7Ae8MBAAAYEJYAAAAMCEsAAAAGhCUAAAADwhIAAIABYQkAAMCAsAQAAGBAWAIAADAgLAEAABgQlgAAAAwISwAAAAaEJQAAAAPCEgAAgAFhCQAAwICwBAAAYEBYAgAAMPB4o2llZeUPzT1eaQ/AhS79vF/6+fdVl+YvKSlxeJKmpby83PaehYWFtvds0cL+cwgVFRW29zx37pztPaurq23v6Ssu/bzXdfzySpq59ALu3LmzN9oDcLHCwkJ16dLF6TEa7NLxa+vWrQ5PAivr1q1zegQ0MXUdv/yqvRAly8rKlJOTo44dO8rf39/u9gBcqLKyUoWFherZs6cCAwOdHqfBOH4BzY/V8csrYQkAAKCp4AZvAAAAg0a5A3vevHnau3ev/Pz8lJSUpF69ejXGt22w7OxsTZ48Wd26dZMkde/eXS+88ILDU9Vt//79mjhxop544gmNGTNGx44d03PPPafKykp17NhRCxcuVEBAgNNjXuanM8+cOVP79u1T27ZtJUlPPvmkBg4c6OyQtUhJSdHu3btVUVGh8ePH6/bbb3f9vv7pzFu3bvWJfe12vnRc++lrYPDgwU6PVKeysjI9/PDDmjhxokaNGuX0OLXauHGjVq1aJY/Ho9/97neu/fk5f/68nn/+eRUXF6u8vFxPP/20+vfv7/RYNXzpd5fXw9Jnn32mw4cPKz09XQcPHlRSUpLS09O9/W2v2T333KPFixc7PYalkpISzZ07V1FRUTXbFi9erMTERA0bNkwvv/yyMjIylJiY6OCUl6ttZkmaNm2aoqOjHZrK2q5du3TgwAGlp6erqKhII0eOVFRUlKv3dW0z33fffa7f127nS8e12l4Dbg5Lr7/+ukJDQ50eo05FRUV67bXXtG7dOpWUlGjJkiWuDUvvvfeeIiMjNX36dBUUFOjxxx/X5s2bnR5Lku/97vL6ZbidO3cqNjZWknTzzTeruLjYK488NlcBAQFauXKlwsPDa7ZlZ2dr0KBBkqTo6Gjt3LnTqfFqVdvMvqBPnz569dVXJUlt2rRRaWmp6/d1bTP7+qP9buBLxzVfeg0cPHhQubm5rg0f0g//9lFRUQoODlZ4eLjmzp3r9Eh1ateunU6fPi1JOnPmjNq1a+fwRP+fr/3u8npYOnHixGX/QO3bt/fK2hh2y83N1YQJEzR69Gjt2LHD6XHq5PF4rrhzv7S0tObUZVhYmOv2d20zS1JaWprGjRunqVOn6tSpUw5MZubv76+goCBJUkZGhgYMGOD6fV3bzP7+/q7f127nS8e1ul4DbpScnKyZM2c6PYbRkSNHVFZWpgkTJigxMdFVv9B/6qGHHtLRo0f14IMPasyYMXr++eedHqmGr/3uavRVI33h4buuXbvqmWee0bBhw5SXl6dx48YpKyvLNddOr4Yv7G9JiouLU9u2bXXrrbdqxYoVWrp0qWbPnu30WLXasmWLMjIytGbNmssuZ7h5X/945pycHJ/Z177Czf/2l/z4NeBG77//vnr37q0bb7zR6VEsnT59WkuXLtXRo0c1btw4ffLJJ/Lz83N6rCts2LBBERERWr16tb766islJSVp/fr1To9VL277mfJ6WAoPD9eJEydqPj5+/Lg6duzo7W97TTp16qThw4dL+mFhzQ4dOqigoMAnfoglKSgoSGVlZQoMDFRBQYFPXO768XXrmJgYzZkzx7lhDLZv365ly5Zp1apVCgkJ8Yl9/dOZfWVfu5mvHdd++hpwo23btikvL0/btm3T999/r4CAAF1//fXq27ev06NdJiwsTHfeeac8Ho86d+6s1q1b69SpUwoLC3N6tCvs2bNH/fr1kyTdcsstOn78uCorK117ZtHNx1OvX4a7//77lZmZKUnat2+fwsPDFRwc7O1ve002btyo1atXS/phNc+TJ0+qU6dODk9Vf3379q3Z51lZWa56+qEukyZNUl5enqQfrltfehLRTc6ePauUlBQtX7685kkyt+/r2mb2hX3tdr50XKvtNeBGr7zyitatW6d3331Xv/rVrzRx4kTXBSVJ6tevn3bt2qWqqioVFRWppKTEVfcC/ViXLl20d+9eSVJ+fr5at27t2qAkuft42iiLUi5atEhffPGF/Pz89OKLL+qWW27x9re8JufOndOMGTN05swZlZeX65lnntEDDzzg9Fi1ysnJUXJysvLz8+XxeNSpUyctWrRIM2fO1IULFxQREaH58+fruuuuc3rUGrXNPGbMGK1YsUKtWrVSUFCQ5s+f77r/qaWnp2vJkiWKjIys2bZgwQLNmjXLtfu6tplHjRqltLQ0V+9rX+Arx7XaXgPJycmKiIhwcCqzJUuW6IYbbnDt0gF/+ctflJGRIUl66qmnam5Kdpvz588rKSlJJ0+eVEVFhSZPnnzFU8hO8bXfXazgDQAAYMAK3gAAAAaEJQAAAAPCEgAAgAFhCQAAwICwBAAAYEBYAgAAMCAsAQAAGBCWAAAADP4fQweDFRVpIVcAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"q7RVioKwlbH1"},"source":["### Linear\n","- 1d만 가능 `.view()`를 통해 1D로 펼쳐줘야함"]},{"cell_type":"code","metadata":{"id":"Kwcedadrlcbl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376292354,"user_tz":-540,"elapsed":285,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"a626f59b-a2f5-4656-85d8-9e63d1366d1f"},"source":["image = torch.from_numpy(image)\n","image.shape"],"execution_count":271,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([28, 28])"]},"metadata":{},"execution_count":271}]},{"cell_type":"code","metadata":{"id":"_mYQy4I3lmAm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376312123,"user_tz":-540,"elapsed":279,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"860cdfc0-06f9-4f09-a27a-48fc5184521e"},"source":["flatten = image.view(1, 28 * 28)\n","flatten.shape"],"execution_count":272,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 784])"]},"metadata":{},"execution_count":272}]},{"cell_type":"code","metadata":{"id":"6wgSmY0Zlofk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376389972,"user_tz":-540,"elapsed":299,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"f632f37a-c1ca-49cf-91a0-b183b9bad456"},"source":["lin = nn.Linear(784, 10)(flatten)\n","lin.shape"],"execution_count":275,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 10])"]},"metadata":{},"execution_count":275}]},{"cell_type":"code","metadata":{"id":"LcJFqf0alsxr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376391720,"user_tz":-540,"elapsed":318,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"a27432e7-8606-4db5-c8f3-cef02f7eab74"},"source":["lin"],"execution_count":276,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[-0.5475,  0.2987, -0.2304, -0.9545, -1.1747, -0.1093,  0.5819, -0.2466,\n","          0.5722,  0.3417]], grad_fn=<AddmmBackward0>)"]},"metadata":{},"execution_count":276}]},{"cell_type":"code","metadata":{"id":"ewEpebSVluHz","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1671376437192,"user_tz":-540,"elapsed":305,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"42666612-9a4d-4658-c6fe-60166ea84173"},"source":["plt.imshow(lin.detach().numpy(), 'jet')\n","plt.colorbar()\n","plt.show()"],"execution_count":277,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"0IjPKDKRl3CV"},"source":["### Softmax"]},{"cell_type":"code","metadata":{"id":"obhBb3O-lzbs","executionInfo":{"status":"ok","timestamp":1671376491749,"user_tz":-540,"elapsed":281,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}}},"source":["with torch.no_grad():\n","  flatten = image.view(1, 28*28)\n","  lin = nn.Linear(784, 10)(flatten)\n","  softmax = F.softmax(lin, dim=1)\n","  "],"execution_count":278,"outputs":[]},{"cell_type":"code","metadata":{"id":"ljgOEyNMmBEE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376498070,"user_tz":-540,"elapsed":295,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"0e4146e0-7d61-4131-d072-9f0169e0677d"},"source":["softmax"],"execution_count":279,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.3207, 0.1016, 0.0778, 0.1296, 0.0295, 0.0374, 0.0515, 0.0857, 0.0438,\n","         0.1226]])"]},"metadata":{},"execution_count":279}]},{"cell_type":"code","metadata":{"id":"18ymFSRAmBo7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376510302,"user_tz":-540,"elapsed":395,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"341ffad4-4396-4857-8afd-b757009a4526"},"source":["np.sum(softmax.numpy())"],"execution_count":280,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":280}]},{"cell_type":"markdown","metadata":{"id":"bYh13Bnj5wEN"},"source":["### F.relu\n","\n","- ReLU 함수를 적용하는 레이어\n","\n","- `nn.ReLU`로도 사용 가능"]},{"cell_type":"code","metadata":{"id":"D4VFePpR9_Ak","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376546774,"user_tz":-540,"elapsed":272,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"95fb4191-e216-4601-e804-8bb8eca5ba56"},"source":["inputs = torch.randn(4, 3, 28, 28).to(device)\n","inputs.shape"],"execution_count":282,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([4, 3, 28, 28])"]},"metadata":{},"execution_count":282}]},{"cell_type":"code","metadata":{"id":"1lKlSiaY5wZW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671376595897,"user_tz":-540,"elapsed":531,"user":{"displayName":"Pepper Sim","userId":"04712026840769542950"}},"outputId":"12ba9814-3853-4de0-fbd1-07393a633e8e"},"source":["layer = nn.Conv2d(3, 20, 5, 1).to(device)\n","output = F.relu(layer(inputs))\n","output.shape"],"execution_count":285,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([4, 20, 24, 24])"]},"metadata":{},"execution_count":285}]},{"cell_type":"markdown","metadata":{"id":"0yuABl4h-yye"},"source":["## Optimizer\n","\n","- `import torch.optim as optim`\n","\n","- `model`의 파라미터를 업데이트\n","\n","- 예시)\n","  ```python\n","  optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-5)\n","  optimizer = optim.SGD(model.parameters(), lr=0.001)\n","  ```\n","\n","- `.zero_grad()`로 초기화\n","- `.step()`으로 업데이트\n","\n"]}]}